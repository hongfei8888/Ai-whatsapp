# Vercel 部署指南

## 📋 部署架构

```
┌─────────────────────────────────────────┐
│  前端 (Next.js)                         │
│  ✅ 部署到：Vercel                      │
│  https://your-app.vercel.app           │
└────────────┬────────────────────────────┘
             │ API 请求
             ↓
┌─────────────────────────────────────────┐
│  后端 (Fastify + WhatsApp)             │
│  ✅ 部署到：Railway                     │
│  https://your-api.railway.app          │
└─────────────────────────────────────────┘
```

---

## 🚀 第一步：部署后端到 Railway

### 1. 注册 Railway 账号

访问：https://railway.app/
- 使用 GitHub 账号登录

### 2. 创建新项目

1. 点击 **"New Project"**
2. 选择 **"Deploy from GitHub repo"**
3. 选择您的仓库：`hongfei8888/Ai-whatsapp`
4. Railway 会自动检测到 Dockerfile

### 3. 配置环境变量

在 Railway 项目设置中添加：

```bash
# 必需的环境变量
NODE_ENV=production
PORT=4000
HOST=0.0.0.0

# 数据库 URL（Railway 会自动创建）
DATABASE_URL=postgresql://...

# DeepSeek API（如果使用 AI）
DEEPSEEK_API_KEY=your_deepseek_api_key

# 其他配置
CORS_ORIGIN=https://your-vercel-app.vercel.app
```

### 4. 部署设置

Railway 会自动：
- ✅ 构建 Docker 镜像
- ✅ 运行容器
- ✅ 分配公共 URL

完成后，记下您的后端 URL，例如：
```
https://ai-whatsapp-production.up.railway.app
```

---

## 🎨 第二步：部署前端到 Vercel

### 方式 1：通过 Vercel Dashboard（推荐）

#### 1. 准备项目

在本地执行：

```bash
# 1. 复制 Vercel 配置
cd web
cp next.config.vercel.js next.config.js

# 2. 提交更改
git add next.config.js vercel.json
git commit -m "Add Vercel deployment config"
git push origin master
```

#### 2. 导入到 Vercel

1. 访问：https://vercel.com/new
2. 使用 GitHub 登录
3. 导入仓库：`hongfei8888/Ai-whatsapp`
4. 配置项目：
   - **Framework Preset**: Next.js
   - **Root Directory**: `web`（重要！）
   - **Build Command**: `npm run build`
   - **Output Directory**: `.next`

#### 3. 配置环境变量

在 Vercel 项目设置中添加：

```bash
# 后端 API 地址（填写 Railway 提供的 URL）
NEXT_PUBLIC_API_BASE_URL=https://your-api.railway.app

# WebSocket 地址（与 API 相同，但使用 wss://）
NEXT_PUBLIC_WS_URL=wss://your-api.railway.app

# 应用名称（可选）
NEXT_PUBLIC_APP_NAME=WhatsApp AI Automation
```

#### 4. 部署

点击 **"Deploy"**，Vercel 会：
- ✅ 安装依赖
- ✅ 构建 Next.js 应用
- ✅ 自动部署

完成后，您会得到一个 URL：
```
https://your-app.vercel.app
```

---

### 方式 2：通过 Vercel CLI

```bash
# 1. 安装 Vercel CLI
npm install -g vercel

# 2. 进入前端目录
cd web

# 3. 登录 Vercel
vercel login

# 4. 部署
vercel --prod

# 5. 按照提示配置项目
```

---

## 🔧 第三步：配置 CORS

### 更新后端 CORS 设置

在 Railway 环境变量中添加：

```bash
CORS_ORIGIN=https://your-vercel-app.vercel.app
```

或者在代码中配置（`server/src/server.ts`）：

```typescript
fastify.register(cors, {
  origin: [
    'https://your-vercel-app.vercel.app',
    'http://localhost:3000', // 开发环境
  ],
  credentials: true,
});
```

---

## ✅ 第四步：验证部署

### 1. 测试前端

访问：`https://your-vercel-app.vercel.app/dashboard`

应该能看到：
- ✅ Dashboard 页面正常加载
- ✅ 左侧导航菜单显示
- ✅ 统计数据显示

### 2. 测试后端连接

在浏览器控制台（F12）查看：
- ✅ API 请求成功
- ✅ WebSocket 连接成功
- ❌ 如果有跨域错误，检查 CORS 配置

### 3. 测试 WhatsApp 功能

1. 点击 **"添加账号"**
2. 应该显示二维码
3. 使用手机扫码登录

---

## 🌐 域名配置（可选）

### Vercel 自定义域名

1. 进入 Vercel 项目设置
2. **Domains** → **Add Domain**
3. 输入您的域名（如 `app.yourdomain.com`）
4. 按照提示配置 DNS：
   ```
   类型: CNAME
   名称: app
   值: cname.vercel-dns.com
   ```

### Railway 自定义域名

1. 进入 Railway 项目设置
2. **Settings** → **Domains**
3. 添加自定义域名
4. 配置 DNS：
   ```
   类型: CNAME
   名称: api
   值: your-project.railway.app
   ```

---

## 📊 部署后的项目结构

```
生产环境：
├── 前端: https://your-app.vercel.app
│   ├── /dashboard/          # 控制面板
│   ├── /contacts/           # 联系人管理
│   ├── /campaigns/          # 营销活动
│   └── /settings/           # 设置
│
└── 后端: https://your-api.railway.app
    ├── /status              # 系统状态
    ├── /auth/*              # 认证相关
    ├── /contacts/*          # 联系人 API
    ├── /campaigns/*         # 营销 API
    └── /ws                  # WebSocket
```

---

## 🔍 故障排除

### 问题 1：前端无法连接后端

**症状**：Dashboard 显示 "连接失败"

**解决**：
1. 检查 Vercel 环境变量 `NEXT_PUBLIC_API_BASE_URL` 是否正确
2. 检查 Railway 后端是否正常运行
3. 检查浏览器控制台的错误信息

### 问题 2：CORS 错误

**症状**：浏览器控制台显示跨域错误

**解决**：
1. 在 Railway 添加环境变量：
   ```
   CORS_ORIGIN=https://your-vercel-app.vercel.app
   ```
2. 重启 Railway 服务

### 问题 3：WebSocket 连接失败

**症状**：实时更新不工作

**解决**：
1. 检查 `NEXT_PUBLIC_WS_URL` 使用 `wss://`（不是 `ws://`）
2. 确保 Railway 支持 WebSocket（默认支持）

### 问题 4：构建失败

**症状**：Vercel 构建报错

**解决**：
1. 确认 **Root Directory** 设置为 `web`
2. 检查 `package.json` 中的依赖版本
3. 查看 Vercel 构建日志

---

## 💡 性能优化建议

### Vercel 配置

1. **启用 Edge Caching**
   ```javascript
   // 在页面中添加
   export const revalidate = 60; // 60 秒重新验证
   ```

2. **图片优化**
   ```javascript
   // 使用 Next.js Image 组件
   import Image from 'next/image';
   ```

3. **代码分割**
   - Next.js 自动处理，无需配置

### Railway 配置

1. **增加实例数量**（如果流量大）
   - 在 Railway 项目设置中调整

2. **启用健康检查**
   ```dockerfile
   HEALTHCHECK --interval=30s --timeout=10s \
     CMD curl -f http://localhost:4000/status || exit 1
   ```

---

## 💰 成本估算

### Vercel（前端）

- **Hobby 计划**：免费
  - 100 GB 带宽/月
  - 无限部署
  - 自动 HTTPS
  - 全球 CDN

- **Pro 计划**：$20/月
  - 1 TB 带宽
  - 更快构建时间
  - 团队协作

### Railway（后端）

- **Developer 计划**：$5/月起
  - 500 小时运行时间
  - 8 GB RAM
  - 100 GB 磁盘

- **Team 计划**：$20/月起
  - 更多资源
  - 团队功能

**预估总成本**：$5-25/月（取决于流量）

---

## 📚 相关资源

- [Vercel 文档](https://vercel.com/docs)
- [Railway 文档](https://docs.railway.app)
- [Next.js 部署指南](https://nextjs.org/docs/deployment)
- [项目 GitHub](https://github.com/hongfei8888/Ai-whatsapp)

---

## 🎉 完成！

现在您的 WhatsApp AI 自动化系统已经部署到云端！

- ✅ 前端：高性能全球 CDN
- ✅ 后端：稳定的容器化部署
- ✅ 自动 HTTPS
- ✅ 零停机部署
- ✅ 全球访问

**享受您的云端应用吧！** 🚀

