'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import WhatsAppLayout, { WhatsAppColors } from '@/components/layout/WhatsAppLayout';
import Sidebar from '@/components/layout/Sidebar';
import MediaUploader from '@/components/media/MediaUploader';
import { api } from '@/lib/api';
import { useWebSocket } from '@/lib/useWebSocket';

// üé® Áæ§ÁªÑÊ∂àÊÅØÊé•Âè£ÂÆö‰πâÔºàÂåÖÂê´Â™í‰ΩìÂ≠óÊÆµÔºâ
interface GroupMessage {
  id: string;
  groupId: string;
  messageId: string;
  fromPhone: string;
  fromName?: string | null;
  text?: string | null;
  mediaType?: string | null;
  mediaUrl?: string | null;
  mediaMimeType?: string | null;
  mediaFileName?: string | null;
  originalFileName?: string | null;
  thumbnailUrl?: string | null;
  createdAt: string;
  translatedText?: string;
}

// WhatsApp Web Ê†∑Âºè
const styles = {
  chatHeader: {
    backgroundColor: WhatsAppColors.panelBackground,
    padding: '10px 16px',
    height: '60px',
    display: 'flex',
    alignItems: 'center',
    gap: '12px',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
  },
  backButton: {
    background: 'none',
    border: 'none',
    color: WhatsAppColors.textPrimary,
    fontSize: '20px',
    cursor: 'pointer',
    padding: '4px',
  },
  chatAvatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    backgroundColor: '#6b7c85',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: '#fff',
    fontSize: '20px',
    fontWeight: '500' as const,
    flexShrink: 0,
  },
  chatHeaderInfo: {
    flex: 1,
    cursor: 'pointer',
  },
  chatHeaderName: {
    color: WhatsAppColors.textPrimary,
    fontSize: '16px',
    fontWeight: '400' as const,
    marginBottom: '2px',
  },
  chatHeaderStatus: {
    color: WhatsAppColors.textSecondary,
    fontSize: '13px',
  },
  messagesArea: {
    flex: 1,
    overflowY: 'auto' as const,
    padding: '20px 8%',
    backgroundColor: '#efeae2',
    backgroundImage: 'linear-gradient(rgba(0,0,0,.05) 1px, transparent 1px), linear-gradient(90deg, rgba(0,0,0,.05) 1px, transparent 1px)',
    backgroundSize: '20px 20px',
  },
  dateSeparator: {
    textAlign: 'center' as const,
    margin: '20px 0 12px',
  },
  dateBadge: {
    display: 'inline-block',
    padding: '5px 12px',
    backgroundColor: '#fff',
    borderRadius: '8px',
    color: WhatsAppColors.textSecondary,
    fontSize: '12.5px',
    boxShadow: '0 1px 0.5px rgba(0,0,0,.13)',
  },
  messageRow: (isOwn: boolean) => ({
    display: 'flex',
    justifyContent: isOwn ? 'flex-end' : 'flex-start',
    marginBottom: '8px',
  }),
  messageBubble: (isOwn: boolean) => ({
    maxWidth: '65%',
    backgroundColor: isOwn ? '#d9fdd3' : '#fff',
    borderRadius: '8px',
    padding: '6px 7px 8px 9px',
    boxShadow: '0 1px 0.5px rgba(0,0,0,.13)',
    position: 'relative' as const,
  }),
  messageSender: {
    color: WhatsAppColors.accent,
    fontSize: '12.5px',
    fontWeight: '500' as const,
    marginBottom: '4px',
  },
  messageText: {
    color: WhatsAppColors.textPrimary,
    fontSize: '14.2px',
    lineHeight: '19px',
    whiteSpace: 'pre-wrap' as const,
    wordBreak: 'break-word' as const,
  },
  messageFooter: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    gap: '4px',
    marginTop: '4px',
  },
  messageTime: {
    color: WhatsAppColors.textSecondary,
    fontSize: '11px',
  },
  translatedText: {
    marginTop: '6px',
    padding: '8px',
    backgroundColor: 'rgba(0, 168, 132, 0.1)',
    borderLeft: `3px solid ${WhatsAppColors.accent}`,
    borderRadius: '4px',
    fontSize: '13px',
    color: WhatsAppColors.textPrimary,
    fontStyle: 'italic' as const,
  },
  inputArea: {
    backgroundColor: WhatsAppColors.panelBackground,
    padding: '10px 16px',
    display: 'flex',
    alignItems: 'flex-end',
    gap: '10px',
    borderTop: `1px solid ${WhatsAppColors.border}`,
  },
  inputWrapper: {
    flex: 1,
    backgroundColor: WhatsAppColors.inputBackground,
    borderRadius: '8px',
    display: 'flex',
    alignItems: 'center',
    padding: '9px 12px',
  },
  input: {
    flex: 1,
    border: 'none',
    outline: 'none',
    backgroundColor: 'transparent',
    color: WhatsAppColors.textPrimary,
    fontSize: '15px',
    resize: 'none' as const,
    maxHeight: '100px',
    lineHeight: '20px',
    fontFamily: 'inherit',
  },
  sendButton: {
    backgroundColor: 'transparent',
    border: 'none',
    color: WhatsAppColors.textSecondary,
    fontSize: '24px',
    cursor: 'pointer',
    padding: '4px 8px',
    transition: 'color 0.2s',
  },
  sendButtonActive: {
    color: WhatsAppColors.accent,
  },
  loadingState: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    height: '100%',
    color: WhatsAppColors.textSecondary,
    fontSize: '14px',
  },
  errorState: {
    display: 'flex',
    flexDirection: 'column' as const,
    alignItems: 'center',
    justifyContent: 'center',
    height: '100%',
    color: '#e74c3c',
    fontSize: '14px',
    gap: '12px',
  },
  retryButton: {
    padding: '8px 16px',
    backgroundColor: WhatsAppColors.accent,
    color: '#fff',
    border: 'none',
    borderRadius: '8px',
    cursor: 'pointer',
    fontSize: '14px',
  },
  headerActions: {
    display: 'flex',
    gap: '8px',
  },
  headerButton: {
    background: 'none',
    border: 'none',
    color: WhatsAppColors.textSecondary,
    fontSize: '20px',
    cursor: 'pointer',
    padding: '4px',
  },
  iconButton: {
    background: 'none',
    border: 'none',
    fontSize: '22px',
    cursor: 'pointer',
    padding: '4px 8px',
    transition: 'color 0.2s',
  },
  // Áæ§ÁªÑÂàóË°®Ê†∑Âºè
  listHeader: {
    backgroundColor: WhatsAppColors.panelBackground,
    padding: '10px 16px',
    height: '60px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
  },
  headerTitle: {
    color: WhatsAppColors.textPrimary,
    fontSize: '20px',
    fontWeight: '600' as const,
  },
  searchBar: {
    backgroundColor: WhatsAppColors.panelBackground,
    padding: '8px 12px',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
  },
  searchInput: {
    width: '100%',
    backgroundColor: WhatsAppColors.inputBackground,
    border: 'none',
    borderRadius: '8px',
    padding: '8px 12px 8px 40px',
    color: WhatsAppColors.textPrimary,
    fontSize: '14px',
    outline: 'none',
  },
  groupList: {
    overflowY: 'auto' as const,
    flex: 1,
  },
  groupItem: (active: boolean) => ({
    padding: '12px 16px',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
    cursor: 'pointer',
    display: 'flex',
    gap: '12px',
    transition: 'background-color 0.2s',
    alignItems: 'center',
    backgroundColor: active ? WhatsAppColors.hover : 'transparent',
  }),
  groupAvatar: {
    width: '49px',
    height: '49px',
    borderRadius: '50%',
    backgroundColor: '#6b7c85',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: '#fff',
    fontSize: '20px',
    fontWeight: '500' as const,
    flexShrink: 0,
  },
  groupInfo: {
    flex: 1,
    minWidth: 0,
  },
  groupName: {
    color: WhatsAppColors.textPrimary,
    fontSize: '16px',
    fontWeight: '400' as const,
    marginBottom: '3px',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap' as const,
  },
  groupMeta: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  groupMembers: {
    color: WhatsAppColors.textSecondary,
    fontSize: '13px',
  },
  groupTime: {
    color: WhatsAppColors.textSecondary,
    fontSize: '12px',
  },
  // Áæ§ÁªÑ‰ø°ÊÅØ‰æßËæπÊ†èÊ†∑Âºè
  infoSidebar: {
    width: '380px',
    height: '100%',
    backgroundColor: WhatsAppColors.background,
    borderLeft: `1px solid ${WhatsAppColors.border}`,
    display: 'flex',
    flexDirection: 'column' as const,
    overflow: 'hidden',
  },
  infoHeader: {
    backgroundColor: WhatsAppColors.panelBackground,
    padding: '20px 24px',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
    display: 'flex',
    alignItems: 'center',
    gap: '16px',
  },
  infoCloseButton: {
    background: 'none',
    border: 'none',
    color: WhatsAppColors.textSecondary,
    fontSize: '24px',
    cursor: 'pointer',
    padding: '0',
    width: '24px',
    height: '24px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  infoTitle: {
    color: WhatsAppColors.textPrimary,
    fontSize: '19px',
    fontWeight: '500' as const,
    flex: 1,
  },
  infoContent: {
    flex: 1,
    overflowY: 'auto' as const,
  },
  infoSection: {
    backgroundColor: WhatsAppColors.panelBackground,
    marginBottom: '8px',
    padding: '16px 24px',
  },
  infoGroupProfile: {
    textAlign: 'center' as const,
    padding: '32px 24px',
    backgroundColor: WhatsAppColors.panelBackground,
    marginBottom: '8px',
  },
  infoGroupAvatar: {
    width: '200px',
    height: '200px',
    borderRadius: '50%',
    backgroundColor: '#6b7c85',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: '#fff',
    fontSize: '80px',
    fontWeight: '500' as const,
    margin: '0 auto 16px',
  },
  infoGroupName: {
    color: WhatsAppColors.textPrimary,
    fontSize: '21px',
    fontWeight: '400' as const,
    marginBottom: '8px',
  },
  infoGroupDesc: {
    color: WhatsAppColors.textSecondary,
    fontSize: '14px',
  },
  infoSectionTitle: {
    color: WhatsAppColors.accent,
    fontSize: '14px',
    marginBottom: '12px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  infoMembersList: {
    display: 'flex',
    flexDirection: 'column' as const,
    gap: '8px',
  },
  infoMemberItem: {
    display: 'flex',
    alignItems: 'center',
    gap: '12px',
    padding: '12px 16px',  // Â¢ûÂä†ÁÇπÂáªÂå∫Âüü
    cursor: 'pointer',
    borderRadius: '8px',
    transition: 'all 0.2s ease',
    userSelect: 'none' as const,  // Èò≤Ê≠¢ÊñáÂ≠óÈÄâ‰∏≠
    margin: '0 -16px',  // Êâ©Â±ïÂà∞ËæπÁºò
  },
  infoMemberAvatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    backgroundColor: '#6b7c85',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: '#fff',
    fontSize: '16px',
    fontWeight: '500' as const,
    flexShrink: 0,
    pointerEvents: 'none' as const,  // üñ±Ô∏è ‰∏çÈòªÊ≠¢Áà∂ÂÖÉÁ¥†ÁöÑÁÇπÂáª‰∫ã‰ª∂
  },
  infoMemberInfo: {
    flex: 1,
    minWidth: 0,
    pointerEvents: 'none' as const,  // üñ±Ô∏è ‰∏çÈòªÊ≠¢Áà∂ÂÖÉÁ¥†ÁöÑÁÇπÂáª‰∫ã‰ª∂
  },
  infoMemberName: {
    color: WhatsAppColors.textPrimary,
    fontSize: '16px',
    fontWeight: '400' as const,
    marginBottom: '2px',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    pointerEvents: 'none' as const,  // üñ±Ô∏è ‰∏çÈòªÊ≠¢Áà∂ÂÖÉÁ¥†ÁöÑÁÇπÂáª‰∫ã‰ª∂
    whiteSpace: 'nowrap' as const,
  },
  infoMemberPhone: {
    color: WhatsAppColors.textSecondary,
    fontSize: '13px',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap' as const,
    pointerEvents: 'none' as const,  // üñ±Ô∏è ‰∏çÈòªÊ≠¢Áà∂ÂÖÉÁ¥†ÁöÑÁÇπÂáª‰∫ã‰ª∂
  },
  infoMemberBadge: {
    color: WhatsAppColors.textSecondary,
    fontSize: '12px',
    padding: '2px 8px',
    pointerEvents: 'none' as const,  // üñ±Ô∏è ‰∏çÈòªÊ≠¢Áà∂ÂÖÉÁ¥†ÁöÑÁÇπÂáª‰∫ã‰ª∂
    backgroundColor: 'rgba(0,0,0,0.05)',
    borderRadius: '10px',
  },
};

export default function GroupChatPage() {
  const router = useRouter();
  const params = useParams();
  const groupId = params.id as string;

  const [group, setGroup] = useState<any>(null);
  const [groups, setGroups] = useState<any[]>([]);  // ÊâÄÊúâÁæ§ÁªÑÂàóË°®
  const [messages, setMessages] = useState<GroupMessage[]>([]);  // üé® ‰ΩøÁî® GroupMessage Á±ªÂûã
  const [inputText, setInputText] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [sending, setSending] = useState(false);
  const [showMediaUploader, setShowMediaUploader] = useState(false);
  const [translatingMessages, setTranslatingMessages] = useState<Set<string>>(new Set());
  const [showEmoji, setShowEmoji] = useState(false);  // üé® Ë°®ÊÉÖÈÄâÊã©Âô®Áä∂ÊÄÅ
  const emojiButtonRef = useRef<HTMLButtonElement>(null);  // üé® Ë°®ÊÉÖÊåâÈíÆÂºïÁî®
  const [searchQuery, setSearchQuery] = useState('');
  const [showGroupInfo, setShowGroupInfo] = useState(false);  // ÊéßÂà∂Áæ§ÁªÑ‰ø°ÊÅØ‰æßËæπÊ†è
  const [groupMembers, setGroupMembers] = useState<any[]>([]);  // Áæ§ÁªÑÊàêÂëòÂàóË°®
  const [loadingMembers, setLoadingMembers] = useState(false);  // ÊàêÂëòÂàóË°®Âä†ËΩΩÁä∂ÊÄÅ
  const [previewImage, setPreviewImage] = useState<string | null>(null);  // üñºÔ∏è ÂõæÁâáÈ¢ÑËßàÁä∂ÊÄÅ
  
  // ÂàÜÈ°µÁõ∏ÂÖ≥Áä∂ÊÄÅ
  const [loadingMore, setLoadingMore] = useState(false);  // ÊòØÂê¶Ê≠£Âú®Âä†ËΩΩÊõ¥Â§ö
  const [hasMore, setHasMore] = useState(true);  // ÊòØÂê¶ËøòÊúâÊõ¥Â§öÊ∂àÊÅØ
  const [offset, setOffset] = useState(0);  // ÂΩìÂâçÂÅèÁßªÈáè

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);
  const messagesAreaRef = useRef<HTMLDivElement>(null);  // Ê∂àÊÅØÂå∫ÂüüÂºïÁî®

  // Âä†ËΩΩÁæ§ÁªÑËØ¶ÊÉÖ
  const loadGroupDetails = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await api.groups.getGroupDetails(groupId);
      setGroup(data);
    } catch (err: any) {
      console.error('Âä†ËΩΩÁæ§ÁªÑËØ¶ÊÉÖÂ§±Ë¥•:', err);
      setError(err.message || 'Âä†ËΩΩÂ§±Ë¥•');
    } finally {
      setLoading(false);
    }
  }, [groupId]);

  // Âä†ËΩΩÁæ§ÁªÑÊ∂àÊÅØÔºàÈ¶ñÊ¨°Âä†ËΩΩÔºâ
  const loadGroupMessages = useCallback(async () => {
    try {
      console.log('üîç Âä†ËΩΩÁæ§ÁªÑÊ∂àÊÅØ...', groupId);
      const pageSize = 50;  // ÊØèÈ°µ50Êù°
      const data = await api.groups.getGroupMessages(groupId, { limit: pageSize, offset: 0 });
      console.log('‚úÖ Áæ§ÁªÑÊ∂àÊÅØÊï∞ÊçÆ:', data);
      console.log('‚úÖ Ê∂àÊÅØÊï∞Èáè:', data.messages?.length || 0);
      console.log('‚úÖ ÊÄªÊ∂àÊÅØÊï∞:', data.total || 0);
      
      // API ÂèØËÉΩËøîÂõûÊï∞ÁªÑÊàñÂØπË±°ÔºåÈúÄË¶ÅÂÖºÂÆπÂ§ÑÁêÜ
      const messagesList = Array.isArray(data) ? data : (data.messages || []);
      console.log('üìã Ëß£ÊûêÂêéÁöÑÊ∂àÊÅØÂàóË°®:', messagesList.length, 'Êù°Ê∂àÊÅØ');
      
      // ÂèçËΩ¨Ê∂àÊÅØÈ°∫Â∫èÔºàÂêéÁ´ØËøîÂõûÁöÑÊòØ desc ÊéíÂ∫èÔºåÈúÄË¶ÅÂèçËΩ¨‰∏∫ ascÔºâ
      const sortedMessages = [...messagesList].reverse();
      console.log('üìã ÊéíÂ∫èÂêéÁöÑÊ∂àÊÅØ:', sortedMessages.length, 'Êù°');
      
      setMessages(sortedMessages);
      setOffset(pageSize);
      
      // Âà§Êñ≠ÊòØÂê¶ËøòÊúâÊõ¥Â§öÊ∂àÊÅØ
      const total = Array.isArray(data) ? messagesList.length : (data.total || 0);
      setHasMore(messagesList.length >= pageSize && sortedMessages.length < total);
      
      console.log('üìä ÂàÜÈ°µÁä∂ÊÄÅ:', { 
        loaded: sortedMessages.length, 
        total, 
        hasMore: messagesList.length >= pageSize && sortedMessages.length < total 
      });
    } catch (err: any) {
      console.error('‚ùå Âä†ËΩΩÁæ§ÁªÑÊ∂àÊÅØÂ§±Ë¥•:', err);
    }
  }, [groupId]);
  
  // Âä†ËΩΩÊõ¥Â§öÊ∂àÊÅØÔºàÊªöÂä®Âà∞È°∂ÈÉ®Êó∂Ôºâ
  const loadMoreMessages = useCallback(async () => {
    if (loadingMore || !hasMore) {
      console.log('‚è≠Ô∏è Ë∑≥ËøáÂä†ËΩΩÊõ¥Â§ö:', { loadingMore, hasMore });
      return;
    }
    
    try {
      setLoadingMore(true);
      console.log('üîç Âä†ËΩΩÊõ¥Â§öÊ∂àÊÅØ...', { offset });
      
      const pageSize = 50;
      const data = await api.groups.getGroupMessages(groupId, { limit: pageSize, offset });
      console.log('‚úÖ Êõ¥Â§öÊ∂àÊÅØÊï∞ÊçÆ:', data);
      
      const messagesList = Array.isArray(data) ? data : (data.messages || []);
      console.log('üìã Êñ∞Âä†ËΩΩÁöÑÊ∂àÊÅØ:', messagesList.length, 'Êù°');
      
      if (messagesList.length === 0) {
        console.log('‚úÖ Ê≤°ÊúâÊõ¥Â§öÊ∂àÊÅØ‰∫Ü');
        setHasMore(false);
        return;
      }
      
      // ÂèçËΩ¨Ê∂àÊÅØÈ°∫Â∫è
      const sortedNewMessages = [...messagesList].reverse();
      
      // ËÆ∞ÂΩïÊªöÂä®‰ΩçÁΩÆ
      const messagesArea = messagesAreaRef.current;
      const scrollHeightBefore = messagesArea?.scrollHeight || 0;
      const scrollTopBefore = messagesArea?.scrollTop || 0;
      
      // Â∞ÜÊñ∞Ê∂àÊÅØÊ∑ªÂä†Âà∞ÂâçÈù¢
      setMessages(prev => [...sortedNewMessages, ...prev]);
      setOffset(prev => prev + pageSize);
      
      // Âà§Êñ≠ÊòØÂê¶ËøòÊúâÊõ¥Â§ö
      const total = Array.isArray(data) ? messagesList.length : (data.total || 0);
      setHasMore(messagesList.length >= pageSize);
      
      console.log('üìä Âä†ËΩΩÊõ¥Â§öÂÆåÊàê:', { 
        newMessages: sortedNewMessages.length,
        totalMessages: messages.length + sortedNewMessages.length,
        newOffset: offset + pageSize,
        hasMore: messagesList.length >= pageSize
      });
      
      // ÊÅ¢Â§çÊªöÂä®‰ΩçÁΩÆÔºà‰øùÊåÅÂú®ÂéüÊù•ÁöÑ‰ΩçÁΩÆÔºâ
      setTimeout(() => {
        if (messagesArea) {
          const scrollHeightAfter = messagesArea.scrollHeight;
          messagesArea.scrollTop = scrollTopBefore + (scrollHeightAfter - scrollHeightBefore);
        }
      }, 0);
    } catch (err: any) {
      console.error('‚ùå Âä†ËΩΩÊõ¥Â§öÊ∂àÊÅØÂ§±Ë¥•:', err);
    } finally {
      setLoadingMore(false);
    }
  }, [groupId, offset, loadingMore, hasMore, messages.length]);

  // Âä†ËΩΩÊâÄÊúâÁæ§ÁªÑÂàóË°®
  const loadGroups = useCallback(async () => {
    try {
      const data = await api.groups.list();
      setGroups(data.groups || []);
    } catch (err: any) {
      console.error('Âä†ËΩΩÁæ§ÁªÑÂàóË°®Â§±Ë¥•:', err);
    }
  }, []);

  // Âä†ËΩΩÁæ§ÁªÑÊàêÂëòÂàóË°®
  const loadGroupMembers = useCallback(async () => {
    try {
      setLoadingMembers(true);
      console.log('üîç Âä†ËΩΩÁæ§ÁªÑÊàêÂëò...', groupId);
      const data = await api.groups.getGroupMembers(groupId);
      console.log('‚úÖ ÊàêÂëòÊï∞ÊçÆ:', data);
      console.log('‚úÖ ÊàêÂëòÊï∞ÊçÆÁ±ªÂûã:', typeof data, Array.isArray(data));
      
      // API ÂèØËÉΩËøîÂõûÊï∞ÁªÑÊàñÂØπË±°ÔºåÈúÄË¶ÅÂÖºÂÆπÂ§ÑÁêÜ
      const members = Array.isArray(data) ? data : (data.members || []);
      console.log('üìã Ëß£ÊûêÂêéÁöÑÊàêÂëòÂàóË°®:', members);
      
      // Â¶ÇÊûúÊ≤°ÊúâÊàêÂëòÊï∞ÊçÆÔºåÂ∞ùËØïÂêåÊ≠•
      if (!members || members.length === 0) {
        console.log('‚ö†Ô∏è Ê≤°ÊúâÊàêÂëòÊï∞ÊçÆÔºåÂ∞ùËØïÂêåÊ≠•...');
        try {
          await api.groups.syncGroupMembers(groupId);
          console.log('‚úÖ ÂêåÊ≠•ÊàêÂäüÔºåÈáçÊñ∞Âä†ËΩΩ...');
          const newData = await api.groups.getGroupMembers(groupId);
          const newMembers = Array.isArray(newData) ? newData : (newData.members || []);
          setGroupMembers(newMembers);
          console.log('üìã ËÆæÁΩÆÊàêÂëòÂàóË°®:', newMembers.length, '‰∏™ÊàêÂëò');
        } catch (syncErr: any) {
          console.error('‚ùå ÂêåÊ≠•Â§±Ë¥•:', syncErr);
          setGroupMembers([]);
        }
      } else {
        setGroupMembers(members);
        console.log('üìã ËÆæÁΩÆÊàêÂëòÂàóË°®:', members.length, '‰∏™ÊàêÂëò');
      }
    } catch (err: any) {
      console.error('‚ùå Âä†ËΩΩÁæ§ÁªÑÊàêÂëòÂ§±Ë¥•:', err);
    } finally {
      setLoadingMembers(false);
    }
  }, [groupId]);

  useEffect(() => {
    loadGroupDetails();
    loadGroupMessages();
    loadGroups();
  }, [loadGroupDetails, loadGroupMessages, loadGroups]);

  // ÊªöÂä®Âà∞Â∫ïÈÉ®
  const scrollToBottom = useCallback(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, []);

  useEffect(() => {
    // È¶ñÊ¨°Âä†ËΩΩÊó∂ÊªöÂä®Âà∞Â∫ïÈÉ®
    if (offset === 50) {  // Âè™Âú®È¶ñÊ¨°Âä†ËΩΩÊó∂ÊªöÂä®
      scrollToBottom();
    }
  }, [messages, scrollToBottom, offset]);
  
  // ÁõëÂê¨ÊªöÂä®‰∫ã‰ª∂ÔºåÊªöÂä®Âà∞È°∂ÈÉ®Êó∂Âä†ËΩΩÊõ¥Â§ö
  useEffect(() => {
    const messagesArea = messagesAreaRef.current;
    if (!messagesArea) return;
    
    const handleScroll = () => {
      const { scrollTop } = messagesArea;
      
      // ÊªöÂä®Âà∞È°∂ÈÉ®Êó∂Âä†ËΩΩÊõ¥Â§öÔºàË∑ùÁ¶ªÈ°∂ÈÉ®Â∞è‰∫é100pxÔºâ
      if (scrollTop < 100 && hasMore && !loadingMore) {
        console.log('üìú ÊªöÂä®Âà∞È°∂ÈÉ®ÔºåÂä†ËΩΩÊõ¥Â§öÊ∂àÊÅØ');
        loadMoreMessages();
      }
    };
    
    messagesArea.addEventListener('scroll', handleScroll);
    return () => messagesArea.removeEventListener('scroll', handleScroll);
  }, [hasMore, loadingMore, loadMoreMessages]);

  // WebSocket ÂÆûÊó∂Êõ¥Êñ∞
  useWebSocket({
    onGroupMessage: (message) => {
      console.log('üì® [Áæ§ÁªÑËÅäÂ§©] Êî∂Âà∞ WebSocket Áæ§ÁªÑÊ∂àÊÅØ:', message);
      console.log('üì® [Áæ§ÁªÑËÅäÂ§©] ÂΩìÂâçÁæ§ÁªÑID:', groupId);
      console.log('üì® [Áæ§ÁªÑËÅäÂ§©] Ê∂àÊÅØÁæ§ÁªÑID:', message.groupId);
      
      // Âà∑Êñ∞Áæ§ÁªÑÂàóË°®ÔºàÊõ¥Êñ∞ÊúÄÂêéÊ∂àÊÅØÊó∂Èó¥Ôºâ
      loadGroups();
      
      if (message.groupId === groupId) {
        console.log('‚úÖ [Áæ§ÁªÑËÅäÂ§©] ÂåπÈÖçÔºÅÊ∑ªÂä†Êñ∞Ê∂àÊÅØÂà∞ÂàóË°®');
        
        // ‰∏çË¶ÅÈáçÊñ∞Âä†ËΩΩÊâÄÊúâÊ∂àÊÅØÔºåËÄåÊòØÊô∫ËÉΩÂú∞Ê∑ªÂä†Êñ∞Ê∂àÊÅØ
        setMessages(prev => {
          // Ê£ÄÊü•Ê∂àÊÅØÊòØÂê¶Â∑≤Â≠òÂú®ÔºàÈÄöËøá messageIdÔºâ
          const exists = prev.some(m => m.messageId === message.messageId);
          if (exists) {
            console.log('üì® Ê∂àÊÅØÂ∑≤Â≠òÂú®ÔºåÂøΩÁï•');
            return prev;
          }

          // ÁßªÈô§‰∏¥Êó∂Ê∂àÊÅØÔºà‰πêËßÇÊõ¥Êñ∞Ôºâ
          const withoutTemp = prev.filter(m => !m.id?.startsWith('temp-'));
          
          // üé® Ê∑ªÂä†Êñ∞Ê∂àÊÅØÔºàÂåÖÂê´ÂÆåÊï¥ÁöÑÂ™í‰ΩìÂ≠óÊÆµÔºâ
          const newMessage: GroupMessage = {
            id: message.messageId || String(Date.now()),
            groupId: message.groupId,
            messageId: message.messageId || '',
            fromPhone: message.from,
            fromName: message.from === 'me' ? 'Êàë' : (message.fromName || message.from),
            text: message.body || message.text,
            mediaType: message.mediaType,
            mediaUrl: message.mediaUrl,
            mediaMimeType: message.mediaMimeType,
            mediaFileName: message.mediaFileName,
            originalFileName: message.originalFileName,
            thumbnailUrl: message.thumbnailUrl,
            createdAt: new Date(message.timestamp || Date.now()).toISOString(),
          };
          
          console.log('‚úÖ Êñ∞Ê∂àÊÅØÂ∑≤Ê∑ªÂä†Âà∞ÂàóË°®', newMessage);
          return [...withoutTemp, newMessage];
        });
        scrollToBottom();  // üé® Ëá™Âä®ÊªöÂä®Âà∞Â∫ïÈÉ®
      } else {
        console.log('‚è≠Ô∏è [Áæ§ÁªÑËÅäÂ§©] ‰∏çÂåπÈÖçÔºåÂøΩÁï•');
      }
    },
  });

  // üé® Ë°®ÊÉÖÈÄâÊã©Âô®ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠
  useEffect(() => {
    if (!showEmoji) return;
    
    const handleClickOutside = (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      const isEmojiButton = target.closest('[data-emoji-container]');
      if (!isEmojiButton) {
        console.log('üîí ÁÇπÂáªÂ§ñÈÉ®ÔºåÂÖ≥Èó≠Ë°®ÊÉÖÈù¢Êùø');
        setShowEmoji(false);
      }
    };

    // ‚úÖ Âª∂ËøüÊ∑ªÂä†ÁõëÂê¨Âô®ÔºåÈÅøÂÖçÂΩìÂâçÁÇπÂáª‰∫ã‰ª∂ËøòÂú®ÂÜíÊ≥°
    const timer = setTimeout(() => {
      document.addEventListener('click', handleClickOutside, true);
    }, 100);

    return () => {
      clearTimeout(timer);
      document.removeEventListener('click', handleClickOutside, true);
    };
  }, [showEmoji]);

  // üñºÔ∏è ÁõëÂê¨ ESC ÈîÆÂÖ≥Èó≠ÂõæÁâáÈ¢ÑËßà
  useEffect(() => {
    if (!previewImage) return;
    
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        setPreviewImage(null);
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [previewImage]);

  // ÂèëÈÄÅÊ∂àÊÅØ
  const handleSendMessage = async () => {
    if (!inputText.trim() || sending) return;

    const messageText = inputText.trim();
    setInputText('');
    setSending(true);

    // ‰πêËßÇÊõ¥Êñ∞ÔºöÁ´ãÂç≥Âú® UI ‰∏≠ÊòæÁ§∫Ê∂àÊÅØ
    const tempId = `temp-${Date.now()}`;
    const optimisticMessage = {
      id: tempId,
      groupId: groupId,
      messageId: tempId,
      fromPhone: 'me',
      fromName: 'Êàë',
      text: messageText,
      mediaType: 'chat',
      createdAt: new Date().toISOString(),
    };
    setMessages(prev => [...prev, optimisticMessage]);

    try {
      await api.groups.sendGroupMessage(groupId, messageText);
      console.log('‚úÖ Ê∂àÊÅØÂèëÈÄÅÊàêÂäüÔºåÁ≠âÂæÖ WebSocket Êõ¥Êñ∞');
    } catch (err: any) {
      console.error('‚ùå ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•:', err);
      alert('ÂèëÈÄÅÂ§±Ë¥•: ' + err.message);
      setInputText(messageText);
      setMessages(prev => prev.filter(m => m.id !== tempId));
    } finally {
      setSending(false);
    }
  };

  // Â§ÑÁêÜÂ™í‰ΩìÊñá‰ª∂‰∏ä‰º†
  const handleMediaUpload = async (result: any) => {
    // üé® ‰πêËßÇÊõ¥Êñ∞ÔºöÁ´ãÂç≥Âú® UI ‰∏≠ÊòæÁ§∫Â™í‰ΩìÊ∂àÊÅØ
    const tempId = `temp-${Date.now()}`;
    const optimisticMessage: GroupMessage = {
      id: tempId,
      groupId: groupId,
      messageId: tempId,
      fromPhone: 'me',
      fromName: 'Êàë',
      text: result.caption || `[${result.mediaType}]`,
      mediaType: result.mediaType,
      mediaUrl: `/media/files/${result.mediaFileName}`,
      mediaMimeType: null,
      mediaFileName: result.mediaFileName,
      originalFileName: result.originalFileName,
      thumbnailUrl: null,
      createdAt: new Date().toISOString(),
    };
    
    setMessages(prev => [...prev, optimisticMessage]);
    setShowMediaUploader(false);
    
    try {
      console.log('üìé ÂºÄÂßãÂèëÈÄÅÁæ§ÁªÑÂ™í‰ΩìÊñá‰ª∂:', result);
      console.log('üìã ‰º†ÈÄíÂèÇÊï∞:', {
        groupId,
        mediaFileName: result.mediaFileName,
        mediaType: result.mediaType,
        caption: result.caption,
        originalFileName: result.originalFileName,
      });
      
      const response = await api.groups.sendGroupMediaMessage(
        groupId,
        result.mediaFileName,      // ‚úÖ ‰øÆÂ§çÔºö‰ΩøÁî® mediaFileName ËÄå‰∏çÊòØ fileName
        result.mediaType,
        result.caption,
        result.originalFileName
      );
      
      console.log('‚úÖ Â™í‰ΩìÊñá‰ª∂Â∑≤ÂèëÈÄÅÔºåÁ≠âÂæÖ WebSocket Êõ¥Êñ∞');
      console.log('üì® ÂêéÁ´ØËøîÂõû:', response);
      
      // ‚úÖ WebSocket ‰ºöËá™Âä®Êõ¥Êñ∞ÁúüÂÆûÊ∂àÊÅØÔºå‰∏¥Êó∂Ê∂àÊÅØ‰ºöË¢´ÊõøÊç¢
    } catch (error) {
      console.error('‚ùå ÂèëÈÄÅÂ™í‰ΩìÊñá‰ª∂Â§±Ë¥•:', error);
      alert('ÂèëÈÄÅÂ§±Ë¥•Ôºö' + (error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'));
      // ‚ùå ÂèëÈÄÅÂ§±Ë¥•ÔºåÁßªÈô§‰πêËßÇÊõ¥Êñ∞ÁöÑÊ∂àÊÅØ
      setMessages(prev => prev.filter(m => m.id !== tempId));
    }
  };

  // ÁøªËØëÂçïÊù°Ê∂àÊÅØ
  const translateMessage = async (messageId: string) => {
    const message = messages.find(m => m.id === messageId);
    if (!message || !message.text) return;

    setTranslatingMessages(prev => new Set(prev).add(messageId));
    try {
      console.log('üåê ÁøªËØëÊ∂àÊÅØ:', message.text);
      const result = await api.translation.translate(message.text);
      
      setMessages(prev =>
        prev.map(m =>
          m.id === messageId
            ? { ...m, translatedText: result.translatedText }
            : m
        )
      );

      console.log('‚úÖ ÁøªËØëÊàêÂäü:', result.translatedText);
    } catch (error) {
      console.error('‚ùå ÁøªËØëÂ§±Ë¥•:', error);
      alert('ÁøªËØëÂ§±Ë¥•Ôºö' + (error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'));
    } finally {
      setTranslatingMessages(prev => {
        const next = new Set(prev);
        next.delete(messageId);
        return next;
      });
    }
  };

  // ÁøªËØëÂπ∂ÂèëÈÄÅ
  const handleTranslateAndSend = async () => {
    if (!inputText.trim()) return;

    try {
      console.log('üåê ÁøªËØëÂπ∂ÂèëÈÄÅ:', inputText);
      const result = await api.translation.translate(inputText);
      
      setInputText(result.translatedText);
      
      setTimeout(() => {
        handleSendMessage();
      }, 300);
    } catch (error) {
      console.error('‚ùå ÁøªËØëÂ§±Ë¥•:', error);
      alert('ÁøªËØëÂ§±Ë¥•Ôºö' + (error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'));
    }
  };

  // Â§ÑÁêÜÈîÆÁõò‰∫ã‰ª∂
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Ê†ºÂºèÂåñÊó∂Èó¥ÔºàÁî®‰∫éÊ∂àÊÅØÔºâ
  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
  };

  // Ê†ºÂºèÂåñÊó∂Èó¥ÔºàÁî®‰∫éÁæ§ÁªÑÂàóË°®Ôºâ
  const formatListTime = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (days === 0) {
      return date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
    } else if (days === 1) {
      return 'Êò®Â§©';
    } else if (days < 7) {
      return `${days}Â§©Ââç`;
    } else {
      return date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' });
    }
  };

  // Ê†ºÂºèÂåñÊó•ÊúüÂàÜÈöîÁ¨¶
  const formatDate = (timestamp: string) => {
    const date = new Date(timestamp);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
      return '‰ªäÂ§©';
    } else if (date.toDateString() === yesterday.toDateString()) {
      return 'Êò®Â§©';
    } else {
      return date.toLocaleDateString('zh-CN', { year: 'numeric', month: 'long', day: 'numeric' });
    }
  };

  // Ëé∑ÂèñÈ¶ñÂ≠óÊØç
  const getInitials = (name: string) => {
    return name?.charAt(0)?.toUpperCase() || 'üë•';
  };

  // Ê†ºÂºèÂåñÁîµËØùÂè∑Á†Å
  const formatPhoneNumber = (phoneE164: string): string => {
    if (!phoneE164) return '';
    
    // Ê∏ÖÁêÜ WhatsApp ID Ê†ºÂºè (ÂéªÈô§ @c.us, @s.whatsapp.net Á≠â)
    let cleaned = phoneE164
      .replace('@c.us', '')
      .replace('@s.whatsapp.net', '')
      .replace('@g.us', '')
      .trim();
    
    // Â¶ÇÊûú‰∏çÊòØ‰ª• + ÂºÄÂ§¥ÔºåÊ∑ªÂä† +
    if (!cleaned.startsWith('+')) {
      cleaned = '+' + cleaned;
    }
    
    // Âè™‰øùÁïôÊï∞Â≠óÂíå + Âè∑
    cleaned = cleaned.replace(/[^\d+]/g, '');
    
    // Ê†ºÂºèÂåñ‰∏∫ÂèØËØªÊ†ºÂºè
    // Ê†πÊçÆÂè∑Á†ÅÈïøÂ∫¶ÂíåÂõΩÂÆ∂‰ª£Á†ÅËøõË°åÊ†ºÂºèÂåñ
    
    if (cleaned.startsWith('+86') && cleaned.length === 14) {
      // ‰∏≠ÂõΩÊâãÊú∫Âè∑: +86 139 8989 9978 (3+11‰Ωç)
      return `${cleaned.slice(0, 3)} ${cleaned.slice(3, 6)} ${cleaned.slice(6, 10)} ${cleaned.slice(10)}`;
    } else if (cleaned.startsWith('+1') && cleaned.length === 12) {
      // ÁæéÂõΩ/Âä†ÊãøÂ§ßÂè∑Á†Å: +1 952 669 6359 (2+10‰Ωç)
      return `${cleaned.slice(0, 2)} ${cleaned.slice(2, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8)}`;
    } else if (cleaned.startsWith('+7') && cleaned.length === 12) {
      // ‰øÑÁΩóÊñØÂè∑Á†Å: +7 212 604 0121 (2+10‰Ωç)
      return `${cleaned.slice(0, 2)} ${cleaned.slice(2, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8)}`;
    } else if (cleaned.length > 12) {
      // ÂÖ∂‰ªñÈïøÂè∑Á†Å: ÈÄöÁî®Ê†ºÂºèÔºàÂõΩÂÆ∂‰ª£Á†Å + ÊØè3‰ΩçÂàÜÁªÑÔºâ
      const countryCode = cleaned.slice(0, -11);
      const number = cleaned.slice(-11);
      return `${countryCode} ${number.slice(0, 3)} ${number.slice(3, 6)} ${number.slice(6, 9)} ${number.slice(9)}`;
    } else if (cleaned.length > 10) {
      // ‰∏≠Á≠âÈïøÂ∫¶Âè∑Á†Å: ÈÄöÁî®Ê†ºÂºè
      const countryCode = cleaned.slice(0, -10);
      const number = cleaned.slice(-10);
      return `${countryCode} ${number.slice(0, 3)} ${number.slice(3, 6)} ${number.slice(6)}`;
    }
    
    return cleaned;
  };

  // ÁÇπÂáªÂèëÈÄÅËÄÖÔºåË∑≥ËΩ¨Âà∞ÂçïÁã¨ËÅäÂ§©
  const handleContactClick = async (fromPhone: string, fromName: string) => {
    try {
      console.log('üîç ÁÇπÂáªËÅîÁ≥ª‰∫∫ - ÂéüÂßãÊï∞ÊçÆ:', { fromPhone, fromName });
      
      // Â¶ÇÊûúÊòØËá™Â∑±ÂèëÈÄÅÁöÑÔºå‰∏çÂ§ÑÁêÜ
      if (fromPhone === 'me' || fromName === 'Êàë') {
        console.log('‚è≠Ô∏è Ë∑≥ËøáËá™Â∑±ÁöÑÊ∂àÊÅØ');
        return;
      }
      
      // ‰ªé WhatsApp ID ‰∏≠ÊèêÂèñÁîµËØùÂè∑Á†Å
      let phoneNumber = fromPhone
        .replace('@c.us', '')
        .replace('@s.whatsapp.net', '')
        .replace('@g.us', '');
      
      console.log('üìû ÊèêÂèñÁöÑÁîµËØùÂè∑Á†Å:', phoneNumber);
      
      // Â∞ùËØïÊü•ÊâæÁé∞ÊúâÂØπËØù
      console.log('üîé Ê≠£Âú®Êü•ÊâæÁé∞ÊúâÂØπËØù...');
      const threadsData = await api.getThreads();
      const cleanPhoneNumber = phoneNumber.replace(/[^0-9]/g, '');
      
      console.log('üìã ÂèØÁî®ÂØπËØùÊï∞:', threadsData.threads?.length || 0);
      
      const existingThread = threadsData.threads?.find((t: any) => {
        if (!t.contact) return false;
        
        const contactPhone = t.contact.phoneE164 || t.contact.phone || '';
        const cleanContactPhone = contactPhone.replace(/[^0-9]/g, '');
        const contactId = t.contact.id || '';
        
        // Á≤æÁ°ÆÂåπÈÖçÁîµËØùÂè∑Á†ÅÊàñ WhatsApp ID
        const phoneMatch = cleanContactPhone === cleanPhoneNumber;
        const idMatch = contactId === fromPhone || contactId.includes(cleanPhoneNumber);
        
        if (phoneMatch || idMatch) {
          console.log('‚úÖ ÊâæÂà∞ÂåπÈÖç:', {
            threadId: t.id,
            contactName: t.contact.name,
            contactPhone,
            match: phoneMatch ? 'phone' : 'id'
          });
        }
        
        return phoneMatch || idMatch;
      });
      
      if (existingThread) {
        console.log('‚û°Ô∏è Ë∑≥ËΩ¨Âà∞Áé∞ÊúâÂØπËØù:', existingThread.id);
        router.push(`/chat/${existingThread.id}`);
      } else {
        console.log('üÜï ÂàõÂª∫Êñ∞ÂØπËØù');
        router.push(`/chat?contact=${encodeURIComponent(fromPhone)}&name=${encodeURIComponent(fromName)}`);
      }
    } catch (error) {
      console.error('‚ùå Ë∑≥ËΩ¨Â§±Ë¥•:', error);
      alert('Êó†Ê≥ïÊâìÂºÄËÅîÁ≥ª‰∫∫ËÅäÂ§©: ' + (error as Error).message);
    }
  };

  // ÊåâÊó•ÊúüÂàÜÁªÑÊ∂àÊÅØ
  const groupMessagesByDate = (messages: any[]) => {
    const groups: { [key: string]: any[] } = {};
    messages.forEach((msg) => {
      const dateKey = new Date(msg.createdAt).toDateString();
      if (!groups[dateKey]) {
        groups[dateKey] = [];
      }
      groups[dateKey].push(msg);
    });
    return groups;
  };

  // ËøáÊª§Áæ§ÁªÑÂàóË°®
  const filteredGroups = groups
    .filter(group => {
      const name = group.name || '';
      return name.toLowerCase().includes(searchQuery.toLowerCase());
    })
    .sort((a, b) => {
      const timeA = new Date(a.updatedAt || 0).getTime();
      const timeB = new Date(b.updatedAt || 0).getTime();
      return timeB - timeA;
    });

  // Áæ§ÁªÑÂàóË°®Èù¢Êùø
  const listPanel = (
    <>
      <div style={styles.listHeader}>
        <div style={styles.headerTitle}>Áæ§ÁªÑËÅäÂ§©</div>
      </div>
      <div style={styles.searchBar}>
        <div style={{ position: 'relative' }}>
          <div style={{ position: 'absolute', left: '12px', top: '50%', transform: 'translateY(-50%)', color: WhatsAppColors.textSecondary }}>
            üîç
          </div>
          <input
            style={styles.searchInput}
            type="text"
            placeholder="ÊêúÁ¥¢Áæ§ÁªÑ..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>
      <div style={styles.groupList}>
        {filteredGroups.length === 0 ? (
          <div style={{ padding: '20px', textAlign: 'center', color: WhatsAppColors.textSecondary }}>
            ÊöÇÊó†Áæ§ÁªÑ
          </div>
        ) : (
          filteredGroups.map((g) => (
            <div
              key={g.id}
              style={styles.groupItem(g.id === groupId)}
              onClick={() => router.push(`/chat/group/${g.id}`)}
              onMouseEnter={(e) => {
                if (g.id !== groupId) {
                  e.currentTarget.style.backgroundColor = WhatsAppColors.hover;
                }
              }}
              onMouseLeave={(e) => {
                if (g.id !== groupId) {
                  e.currentTarget.style.backgroundColor = 'transparent';
                }
              }}
            >
              <div style={styles.groupAvatar}>
                {getInitials(g.name || '')}
              </div>
              <div style={styles.groupInfo}>
                <div style={styles.groupName}>{g.name || 'Êú™ÂëΩÂêçÁæ§ÁªÑ'}</div>
                <div style={styles.groupMeta}>
                  <div style={styles.groupMembers}>
                    {g.memberCount || 0} ‰ΩçÊàêÂëò
                  </div>
                  {g.updatedAt && (
                    <div style={styles.groupTime}>
                      {formatListTime(g.updatedAt)}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </>
  );

  // ‰∏ªÂÜÖÂÆπÂå∫
  const mainContent = (
    <>
      {/* ËÅäÂ§©Â§¥ÈÉ® */}
      <div style={styles.chatHeader}>
        <button
          onClick={() => router.push('/chat')}
          style={{
            background: 'none',
            border: 'none',
            color: WhatsAppColors.textSecondary,
            fontSize: '20px',
            cursor: 'pointer',
            padding: '8px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            borderRadius: '50%',
            width: '40px',
            height: '40px',
            transition: 'background-color 0.2s',
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.backgroundColor = 'rgba(0,0,0,0.05)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.backgroundColor = 'transparent';
          }}
          title="ËøîÂõûËÅäÂ§©ÂàóË°®"
        >
          ‚Üê
        </button>
        <div style={styles.chatAvatar}>üë•</div>
        <div style={styles.chatHeaderInfo} onClick={() => router.push(`/groups/manage?groupId=${groupId}`)}>
          <div style={styles.chatHeaderName}>{group?.name || 'Áæ§ÁªÑ'}</div>
          <div style={styles.chatHeaderStatus}>
            {group?.memberCount || 0} ‰ΩçÊàêÂëò
          </div>
        </div>
        <div style={styles.headerActions}>
          <button style={styles.headerButton} title="ÊêúÁ¥¢">
            üîç
          </button>
          <button 
            style={styles.headerButton} 
            title="Áæ§ÁªÑ‰ø°ÊÅØ"
            onClick={() => {
              setShowGroupInfo(true);
              loadGroupMembers();
            }}
          >
            ‚ãÆ
          </button>
        </div>
      </div>

      {/* Ê∂àÊÅØÂå∫Âüü */}
      <div style={styles.messagesArea} ref={messagesAreaRef}>
        {loading ? (
          <div style={styles.loadingState}>Âä†ËΩΩ‰∏≠...</div>
        ) : error ? (
          <div style={styles.errorState}>
            <div>{error}</div>
            <button style={styles.retryButton} onClick={() => {
              loadGroupDetails();
              loadGroupMessages();
            }}>
              ÈáçËØï
            </button>
          </div>
        ) : messages.length === 0 ? (
          <div style={styles.loadingState}>ÊöÇÊó†Ê∂àÊÅØ</div>
        ) : (
          <>
            {/* Âä†ËΩΩÊõ¥Â§öÊèêÁ§∫ */}
            {loadingMore && (
              <div style={{
                textAlign: 'center',
                padding: '10px',
                color: WhatsAppColors.textSecondary,
                fontSize: '13px',
              }}>
                Âä†ËΩΩ‰∏≠...
              </div>
            )}
            {!loadingMore && hasMore && (
              <div style={{
                textAlign: 'center',
                padding: '10px',
                color: WhatsAppColors.textSecondary,
                fontSize: '13px',
              }}>
                Âêë‰∏äÊªöÂä®Âä†ËΩΩÊõ¥Â§öÂéÜÂè≤Ê∂àÊÅØ
              </div>
            )}
            {!hasMore && messages.length > 0 && (
              <div style={{
                textAlign: 'center',
                padding: '10px',
                color: WhatsAppColors.textSecondary,
                fontSize: '13px',
              }}>
                Â∑≤Âä†ËΩΩÂÖ®ÈÉ®Ê∂àÊÅØ
              </div>
            )}
            
            {Object.entries(groupMessagesByDate(messages)).map(([dateKey, msgs]) => (
              <div key={dateKey}>
                <div style={styles.dateSeparator}>
                  <div style={styles.dateBadge}>
                    {formatDate(msgs[0].createdAt)}
                  </div>
                </div>

                {msgs.map((message) => {
                  const isOwn = message.fromPhone === 'me' || 
                                message.fromName === 'Êàë' || 
                                message.fromPhone?.includes('Ëá™Â∑±') ||
                                message.id?.startsWith('temp-');
                  return (
                    <div key={message.id} style={styles.messageRow(isOwn)}>
                      <div style={styles.messageBubble(isOwn)}>
                        {!isOwn && (
                          <div 
                            style={{
                              ...styles.messageSender,
                              cursor: 'pointer',
                              textDecoration: 'none',
                            }}
                            onClick={() => handleContactClick(message.fromPhone, message.fromName)}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.textDecoration = 'underline';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.textDecoration = 'none';
                            }}
                            title="ÁÇπÂáªÊâìÂºÄ‰∏éÊ≠§ËÅîÁ≥ª‰∫∫ÁöÑÁßÅËÅä"
                          >
                            {message.fromName || message.fromPhone || 'Êú™Áü•'}
                          </div>
                        )}
                        
                        {/* üé® Â™í‰ΩìÈ¢ÑËßà */}
                        {message.mediaUrl && message.mediaType && (
                          <div style={{ marginBottom: message.text ? '8px' : 0 }}>
                            {message.mediaType.startsWith('image') ? (
                              <img
                                src={message.thumbnailUrl ? `http://localhost:4000${message.thumbnailUrl}` : `http://localhost:4000${message.mediaUrl}`}
                                alt="ÂõæÁâáÊ∂àÊÅØ"
                                style={{
                                  maxWidth: '300px',
                                  maxHeight: '300px',
                                  borderRadius: '8px',
                                  cursor: 'pointer',
                                  display: 'block',
                                }}
                                onClick={() => setPreviewImage(`http://localhost:4000${message.mediaUrl}`)}
                                title="ÁÇπÂáªÊü•ÁúãÂéüÂõæ"
                              />
                            ) : message.mediaType.startsWith('video') ? (
                              <video
                                src={`http://localhost:4000${message.mediaUrl}`}
                                controls
                                style={{
                                  maxWidth: '300px',
                                  maxHeight: '300px',
                                  borderRadius: '8px',
                                  display: 'block',
                                }}
                              />
                            ) : message.mediaType.startsWith('audio') ? (
                              <audio
                                src={`http://localhost:4000${message.mediaUrl}`}
                                controls
                                style={{
                                  maxWidth: '300px',
                                }}
                              />
                            ) : (
                              <div style={{ 
                                display: 'flex', 
                                alignItems: 'center', 
                                gap: '8px', 
                                padding: '8px', 
                                backgroundColor: 'rgba(0,0,0,0.05)', 
                                borderRadius: '8px' 
                              }}>
                                <span style={{ fontSize: '24px' }}>üìé</span>
                                <div>
                                  <div style={{ fontSize: '14px', fontWeight: 500 }}>
                                    {message.originalFileName || message.mediaFileName || 'Êñá‰ª∂'}
                                  </div>
                                  <a
                                    href={`http://localhost:4000${message.mediaUrl}`}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    style={{ fontSize: '12px', color: WhatsAppColors.accent }}
                                  >
                                    ÁÇπÂáª‰∏ãËΩΩ
                                  </a>
                                </div>
                              </div>
                            )}
                          </div>
                        )}
                        
                        {/* üé® ÊñáÊú¨Ê∂àÊÅØ */}
                        {message.text && (
                          <div style={styles.messageText}>
                            {message.text}
                          </div>
                        )}
                        
                        {/* üé® ÁøªËØëÊñáÊú¨ */}
                        {message.translatedText && (
                          <div style={styles.translatedText}>
                            {message.translatedText}
                          </div>
                        )}
                        
                        <div style={styles.messageFooter}>
                          <span style={styles.messageTime}>
                            {formatTime(message.createdAt)}
                          </span>
                          {isOwn && <span style={{ marginLeft: '4px' }}>‚úì</span>}
                          {!isOwn && message.text && (
                            <button
                              style={{
                                ...styles.iconButton,
                                fontSize: '14px',
                                color: translatingMessages.has(message.id) ? WhatsAppColors.textSecondary : WhatsAppColors.accent,
                              }}
                              onClick={() => translateMessage(message.id)}
                              title="ÁøªËØë"
                              disabled={translatingMessages.has(message.id)}
                            >
                              {translatingMessages.has(message.id) ? '...' : 'üåê'}
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            ))}
            <div ref={messagesEndRef} />
          </>
        )}
      </div>

      {/* ËæìÂÖ•Âå∫Âüü */}
      <div style={styles.inputArea}>
        {/* üé® Ë°®ÊÉÖÊåâÈíÆÔºà‰øÆÂ§çÂêéÔºâ */}
        <div style={{ position: 'relative', zIndex: 1000 }} data-emoji-container>
          <button
            ref={emojiButtonRef}
            style={{
              ...styles.sendButton,
              backgroundColor: showEmoji ? WhatsAppColors.hover : 'transparent',
            }}
            onClick={(e) => {
              e.stopPropagation();
              console.log('üî• Ë°®ÊÉÖÊåâÈíÆÁÇπÂáª, ÂΩìÂâçÁä∂ÊÄÅ:', showEmoji);
              setShowEmoji(!showEmoji);
            }}
            title="Ë°®ÊÉÖ"
          >
            üòä
          </button>

          {/* üé® Ë°®ÊÉÖÈÄâÊã©Âô®Èù¢Êùø */}
          {showEmoji && (
            <div
              style={{
                position: 'absolute',
                bottom: '50px',
                left: '0',
                backgroundColor: '#fff',
                border: `1px solid ${WhatsAppColors.border}`,
                borderRadius: '8px',
                padding: '12px',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',
                width: '320px',
                maxHeight: '300px',
                overflowY: 'auto',
                zIndex: 1001,
              }}
              onClick={(e) => e.stopPropagation()}
            >
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(8, 1fr)',
                gap: '4px',
              }}>
                {[
                  'üòä', 'üòÇ', '‚ù§Ô∏è', 'üëç', 'üëé', 'üôè', 'üò≠', 'üòç',
                  'üòò', 'üòé', 'ü§î', 'üòÖ', 'üò¢', 'üò°', 'ü•∞', 'üòá',
                  'ü§ó', 'ü§©', 'üò¥', 'üòã', 'üòú', 'ü§™', 'üòè', 'üò¨',
                  'üôÑ', 'üò∂', 'üòê', 'üòë', 'üòØ', 'üòÆ', 'üò≤', 'ü•∫',
                  'ü•≥', 'üò§', 'üò†', 'ü§¨', 'üòà', 'üëπ', 'üë∫', 'üíÄ',
                  '‚ò†Ô∏è', 'üëª', 'üëΩ', 'ü§ñ', 'üí©', 'üò∫', 'üò∏', 'üòπ',
                  'üëã', 'ü§ö', '‚úã', 'üñêÔ∏è', 'üëå', '‚úåÔ∏è', 'ü§û', 'ü§ù',
                  'üí™', 'üôå', 'üëè', 'ü§≤', 'ü§ù', 'üëê', 'üôè', '‚úçÔ∏è',
                ].map((emoji, index) => (
                  <button
                    key={index}
                    style={{
                      fontSize: '24px',
                      padding: '4px',
                      border: 'none',
                      background: 'none',
                      cursor: 'pointer',
                      borderRadius: '4px',
                      transition: 'background-color 0.2s',
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.backgroundColor = WhatsAppColors.hover;
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.backgroundColor = 'transparent';
                    }}
                    onClick={() => {
                      console.log('üòä Ê∑ªÂä†Ë°®ÊÉÖ:', emoji);
                      setInputText(prev => prev + emoji);
                      setShowEmoji(false);
                    }}
                  >
                    {emoji}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
        <button
          style={{...styles.iconButton, color: showMediaUploader ? WhatsAppColors.accent : WhatsAppColors.textSecondary}}
          onClick={() => setShowMediaUploader(true)}
          title="ÂèëÈÄÅÊñá‰ª∂"
        >
          üìé
        </button>
        <div style={styles.inputWrapper}>
          <textarea
            ref={inputRef}
            style={styles.input}
            placeholder="ËæìÂÖ•Ê∂àÊÅØ"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyDown={handleKeyDown}
            rows={1}
          />
        </div>
        <button
          style={styles.sendButton}
          onClick={handleTranslateAndSend}
          title="ÁøªËØëÂêéÂèëÈÄÅ"
        >
          üåê‚û§
        </button>
        <button
          style={{
            ...styles.sendButton,
            ...(inputText.trim() ? styles.sendButtonActive : {}),
          }}
          onClick={handleSendMessage}
          disabled={!inputText.trim() || sending}
          title="ÂèëÈÄÅ"
        >
          {sending ? '‚è≥' : '‚û§'}
        </button>
      </div>

      {/* Â™í‰Ωì‰∏ä‰º†Âô® */}
      {showMediaUploader && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000,
          }}
          onClick={() => setShowMediaUploader(false)}
        >
          <div onClick={(e) => e.stopPropagation()}>
            <MediaUploader
              onUploadComplete={handleMediaUpload}
              onUploadError={(error) => {
                console.error('‰∏ä‰º†Â§±Ë¥•:', error);
                alert('‰∏ä‰º†Â§±Ë¥•Ôºö' + error);
                setShowMediaUploader(false);
              }}
            />
          </div>
        </div>
      )}
    </>
  );

  // Áæ§ÁªÑ‰ø°ÊÅØ‰æßËæπÊ†è
  const groupInfoSidebar = showGroupInfo && (
    <div style={styles.infoSidebar}>
      {/* Â§¥ÈÉ® */}
      <div style={styles.infoHeader}>
        <button 
          style={styles.infoCloseButton}
          onClick={() => setShowGroupInfo(false)}
          title="ÂÖ≥Èó≠"
        >
          √ó
        </button>
        <div style={styles.infoTitle}>Áæ§ÁªÑ‰ø°ÊÅØ</div>
      </div>

      {/* ÂÜÖÂÆπ */}
      <div style={styles.infoContent}>
        {/* Áæ§ÁªÑÂ§¥ÂÉèÂíåÂêçÁß∞ */}
        <div style={styles.infoGroupProfile}>
          <div style={styles.infoGroupAvatar}>
            {getInitials(group?.name || '')}
          </div>
          <div style={styles.infoGroupName}>{group?.name || 'Êú™ÂëΩÂêçÁæ§ÁªÑ'}</div>
          <div style={styles.infoGroupDesc}>
            Áæ§ÁªÑ ¬∑ {group?.memberCount || 0} ‰ΩçÊàêÂëò
          </div>
        </div>

        {/* Áæ§ÁªÑÊèèËø∞ */}
        {group?.description && (
          <div style={styles.infoSection}>
            <div style={styles.infoSectionTitle}>Áæ§ÁªÑÊèèËø∞</div>
            <div style={{ color: WhatsAppColors.textPrimary, fontSize: '14px', lineHeight: '1.5' }}>
              {group.description}
            </div>
          </div>
        )}

        {/* ÊàêÂëòÂàóË°® */}
        <div style={styles.infoSection}>
          <div style={styles.infoSectionTitle}>
            <span>{group?.memberCount || 0} ‰ΩçÊàêÂëò</span>
          </div>
          <div style={styles.infoMembersList}>
            {loadingMembers ? (
              <div style={{ color: WhatsAppColors.textSecondary, fontSize: '14px', textAlign: 'center', padding: '20px 0' }}>
                Âä†ËΩΩ‰∏≠...
              </div>
            ) : groupMembers.length === 0 ? (
              <div style={{ color: WhatsAppColors.textSecondary, fontSize: '14px', textAlign: 'center', padding: '20px 0' }}>
                ÊöÇÊó†ÊàêÂëò‰ø°ÊÅØ
              </div>
            ) : (
              groupMembers.map((member: any) => (
                <div 
                  key={member.id || member.phoneE164}
                  style={styles.infoMemberItem}
                  onClick={async () => {
                    try {
                      console.log('üîç ÁÇπÂáªÊàêÂëò:', member);
                      
                      // üîç Â∞ùËØï‰ªéÂ§ö‰∏™Âú∞ÊñπÊèêÂèñÁîµËØùÂè∑Á†Å
                      let phoneNumber = member.phoneE164 || member.phone || '';
                      let alternativePhone = member.displayName || '';  // displayName ÂèØËÉΩÂåÖÂê´ÁúüÂÆûÂè∑Á†Å
                      
                      console.log('üìû ÂéüÂßãÁîµËØùÂè∑Á†Å:', phoneNumber);
                      console.log('üìû Â§áÁî®Âè∑Á†ÅÔºàdisplayNameÔºâ:', alternativePhone);
                      
                      // Ê∏ÖÁêÜ WhatsApp ÂêéÁºÄÂíåÈùûÊï∞Â≠óÂ≠óÁ¨¶
                      phoneNumber = phoneNumber
                        .replace('@c.us', '')
                        .replace('@s.whatsapp.net', '')
                        .replace('@g.us', '')
                        .replace(/[^0-9+]/g, '')
                        .trim();
                      
                      alternativePhone = alternativePhone
                        .replace(/[^0-9+]/g, '')
                        .trim();
                      
                      console.log('üìû Ê∏ÖÁêÜÂêéÁöÑÁîµËØùÂè∑Á†Å:', phoneNumber);
                      console.log('üìû Ê∏ÖÁêÜÂêéÁöÑÂ§áÁî®Âè∑Á†Å:', alternativePhone);
                      
                      // Â¶ÇÊûú‰∏ªÂè∑Á†Å‰∏∫Á©∫ÊàñÂ§™Áü≠ÔºåÂ∞ùËØï‰ΩøÁî®Â§áÁî®Âè∑Á†Å
                      if (!phoneNumber || phoneNumber.length < 10) {
                        console.log('‚ö†Ô∏è ‰∏ªÂè∑Á†ÅÊó†ÊïàÔºå‰ΩøÁî®Â§áÁî®Âè∑Á†Å');
                        phoneNumber = alternativePhone;
                      }
                      
                      if (!phoneNumber || phoneNumber.length < 10) {
                        console.error('‚ùå ÁîµËØùÂè∑Á†Å‰∏∫Á©∫ÊàñÂ§™Áü≠');
                        alert('Êó†Ê≥ïËé∑ÂèñËØ•ÊàêÂëòÁöÑÁîµËØùÂè∑Á†Å');
                        return;
                      }
                      
                      // ÂÖ≥Èó≠‰æßËæπÊ†è
                      setShowGroupInfo(false);
                      
                      // Âè™‰øùÁïôÊï∞Â≠óÈÉ®ÂàÜÁî®‰∫éÂåπÈÖç
                      const cleanPhoneNumber = phoneNumber.replace(/[^0-9]/g, '');
                      const cleanAlternativePhone = alternativePhone.replace(/[^0-9]/g, '');
                      console.log('üî¢ Á∫ØÊï∞Â≠óÂè∑Á†Å:', cleanPhoneNumber);
                      console.log('üî¢ Â§áÁî®Á∫ØÊï∞Â≠óÂè∑Á†Å:', cleanAlternativePhone);
                      
                      // Êü•ÊâæÁé∞ÊúâÂØπËØù
                      console.log('üîé Êü•ÊâæÁé∞ÊúâÂØπËØù...');
                      const threadsResponse = await api.getThreads();
                      console.log('üìã Ëé∑ÂèñÂà∞ÂØπËØùÂàóË°®:', threadsResponse);
                      
                      const threads = threadsResponse?.threads || [];
                      console.log('üìä ÂØπËØùÊï∞Èáè:', threads.length);
                      console.log('üìã ÊâÄÊúâÂØπËØùÊï∞ÊçÆ:', threads.map((t: any) => ({
                        id: t.id,
                        contactName: t.contact?.name,
                        contactPhone: t.contact?.phoneE164,
                      })));
                      
                      const existingThread = threads.find((t: any) => {
                        if (!t.contact) {
                          console.log('‚ö†Ô∏è ÂØπËØùÊ≤°ÊúâËÅîÁ≥ª‰∫∫:', t.id);
                          return false;
                        }
                        const contactPhone = t.contact.phoneE164 || t.contact.phone || '';
                        const contactName = t.contact.name || '';
                        const cleanContactPhone = contactPhone.replace(/[^0-9]/g, '');
                        const cleanContactName = contactName.replace(/[^0-9]/g, '');
                        
                        // üîç Â∞ùËØïÂ§öÁßçÂåπÈÖçÊñπÂºè
                        const matchByPhone = cleanContactPhone === cleanPhoneNumber;
                        const matchByAlternative = cleanContactPhone === cleanAlternativePhone;
                        const matchByName = cleanContactName === cleanPhoneNumber;
                        const matchByNameAlternative = cleanContactName === cleanAlternativePhone;
                        
                        const isMatch = matchByPhone || matchByAlternative || matchByName || matchByNameAlternative;
                        
                        // üîç ËØ¶ÁªÜÊó•ÂøóÔºöÊòæÁ§∫ÊØè‰∏™ÂØπËØùÁöÑÂè∑Á†Å
                        console.log('üîç Ê£ÄÊü•ÂØπËØù:', {
                          threadId: t.id,
                          contactName,
                          contactPhone,  // ÂéüÂßãÂè∑Á†Å
                          cleanContactPhone,  // Ê∏ÖÁêÜÂêéÁöÑÂè∑Á†Å
                          cleanContactName,  // Ê∏ÖÁêÜÂêéÁöÑÂêçÁß∞
                          cleanPhoneNumber,  // ‰∏ªÂè∑Á†Å
                          cleanAlternativePhone,  // Â§áÁî®Âè∑Á†Å
                          matchByPhone,
                          matchByAlternative,
                          matchByName,
                          matchByNameAlternative,
                          isMatch,  // ÊòØÂê¶ÂåπÈÖç
                        });
                        
                        if (isMatch) {
                          console.log('‚úÖ ÂåπÈÖçÊàêÂäüÔºÅ');
                        }
                        
                        return isMatch;
                      });
                      
                      if (existingThread) {
                        console.log('‚úÖ ÊâæÂà∞Áé∞ÊúâÂØπËØù:', existingThread.id);
                        
                        // üîê ÈÄöËøáÂêéÁ´Ø API È™åËØÅÂè∑Á†Å
                        console.log('üîê Ê≠£Âú®È™åËØÅÂè∑Á†Å...');
                        setShowGroupInfo(false);  // ÊèêÂâçÂÖ≥Èó≠‰æßËæπÊ†è
                        
                        try {
                          // ‰ΩøÁî®‰∏ªÂè∑Á†ÅÈ™åËØÅ
                          console.log('üìû ÂáÜÂ§áÈ™åËØÅÂè∑Á†Å:', phoneNumber);
                          const verifyResult = await api.contacts.verify(phoneNumber);
                          console.log('üìä È™åËØÅÁªìÊûú:', verifyResult);
                          
                          if (!verifyResult.isValid) {
                            // Âè∑Á†ÅÊó†Êïà
                            const invalidMessage = `
‚ö†Ô∏è Âè∑Á†ÅÈ™åËØÅÂ§±Ë¥•

Ê≠§Âè∑Á†Å‰∏çÊòØÊúâÊïàÁöÑ WhatsApp ËÅîÁ≥ª‰∫∫Ôºö
üì± Âè∑Á†ÅÔºö${phoneNumber}

ÂèØËÉΩÂéüÂõ†Ôºö
‚Ä¢ Âè∑Á†ÅÊ†ºÂºè‰∏çÊ≠£Á°Æ
‚Ä¢ ËØ•Âè∑Á†ÅÊú™Ê≥®ÂÜå WhatsApp
‚Ä¢ Áæ§ÁªÑÊàêÂëòÁöÑÂè∑Á†Å‰ø°ÊÅØ‰∏çÂáÜÁ°Æ

Âª∫ËÆÆÔºöËØ∑Á°ÆËÆ§ËØ•Âè∑Á†ÅÊòØÂê¶Ê≠£Á°ÆÔºåÊàñÂ∞ùËØïÈÄöËøáÂÖ∂‰ªñÊñπÂºèËÅîÁ≥ª„ÄÇ
                            `.trim();
                            
                            alert(invalidMessage);
                            return;
                          }
                          
                          // Âè∑Á†ÅÊúâÊïàÔºåÊòæÁ§∫Á°ÆËÆ§ÂØπËØùÊ°Ü
                          const contact = existingThread.contact;
                          const contactInfo = verifyResult.contactInfo;
                          
                          let verificationStatus = '';
                          if (verifyResult.existsInDb) {
                            verificationStatus = '‚úÖ Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑËÅîÁ≥ª‰∫∫';
                          } else if (verifyResult.existsInWhatsApp) {
                            verificationStatus = '‚úÖ WhatsApp È™åËØÅÈÄöËøá';
                          }
                          
                          const verificationMessage = `
Á°ÆËÆ§Ë¶ÅÊâìÂºÄ‰∏éÊ≠§ËÅîÁ≥ª‰∫∫ÁöÑÂØπËØùÂêóÔºü

üì± Âè∑Á†ÅÔºö${contactInfo?.phoneE164 || contact.phoneE164 || 'Êú™Áü•'}
üë§ ÂêçÁß∞Ôºö${contactInfo?.name || contact.name || 'Êú™ËÆæÁΩÆ'}
${verificationStatus}

‚ö†Ô∏è ËØ∑Á°ÆËÆ§ËøôÊòØÊÇ®Ë¶ÅËÅîÁ≥ªÁöÑ‰∫∫„ÄÇ
                          `.trim();
                          
                          if (confirm(verificationMessage)) {
                            console.log('‚úÖ Áî®Êà∑Á°ÆËÆ§ÔºåË∑≥ËΩ¨Âà∞ÂØπËØù');
                            router.push(`/chat/${existingThread.id}`);
                          } else {
                            console.log('‚ùå Áî®Êà∑ÂèñÊ∂à‰∫ÜË∑≥ËΩ¨');
                          }
                        } catch (verifyError: any) {
                          console.error('‚ùå È™åËØÅÂ§±Ë¥•:', verifyError);
                          
                          // Âà§Êñ≠ÈîôËØØÁ±ªÂûã
                          if (verifyError.message?.includes('SERVICE_UNAVAILABLE')) {
                            alert('È™åËØÅÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®ÔºåËØ∑Á°Æ‰øù WhatsApp Ë¥¶Âè∑Âú®Á∫øÂêéÈáçËØï');
                          } else if (verifyError.message?.includes('MISSING_ACCOUNT_ID')) {
                            alert('Ë¥¶Âè∑IDÁº∫Â§±ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï');
                          } else {
                            alert('È™åËØÅÂè∑Á†ÅÊó∂Âá∫Èîô: ' + verifyError.message);
                          }
                        }
                      } else {
                        console.log('üÜï Ê≤°ÊúâÊâæÂà∞Áé∞ÊúâÂØπËØù');
                        
                        // ÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
                        const infoMessage = `
Êú™ÊâæÂà∞‰∏éÊ≠§ÊàêÂëòÁöÑÂØπËØù„ÄÇ

Áæ§ÁªÑÊàêÂëò‰ø°ÊÅØÔºö
üì± Âè∑Á†Å1Ôºö${phoneNumber}
üì± Âè∑Á†Å2Ôºö${alternativePhone}
üë§ ÊòæÁ§∫ÂêçÁß∞Ôºö${member.displayName || 'Êú™ËÆæÁΩÆ'}

üí° ÂèØËÉΩÁöÑÂéüÂõ†Ôºö
1. Ê≠§ÊàêÂëòÁöÑÂè∑Á†ÅÂèØËÉΩ‰∏çÂáÜÁ°Æ
2. ÊÇ®ËøòÊú™‰∏éÊ≠§Âè∑Á†ÅÂª∫Á´ã WhatsApp ÂØπËØù
3. Ê≠§Âè∑Á†ÅÂèØËÉΩ‰∏çÊòØÊúâÊïàÁöÑ WhatsApp Âè∑Á†Å

Âª∫ËÆÆÔºöËØ∑ÂÖàÂú® WhatsApp Â∫îÁî®‰∏≠‰∏éËØ•Âè∑Á†ÅËÅäÂ§©ÔºåÁÑ∂ÂêéÂà∑Êñ∞ËÅîÁ≥ª‰∫∫ÂàóË°®„ÄÇ
                        `.trim();
                        
                        alert(infoMessage);
                      }
                    } catch (error) {
                      console.error('‚ùå Ë∑≥ËΩ¨Â§±Ë¥•:', error);
                      alert('Êó†Ê≥ïÊâìÂºÄÂØπËØù: ' + (error as Error).message);
                    }
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = WhatsAppColors.hover;
                    e.currentTarget.style.transform = 'scale(1.01)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = 'transparent';
                    e.currentTarget.style.transform = 'scale(1)';
                  }}
                >
                  <div style={styles.infoMemberAvatar}>
                    {member.profilePicUrl ? (
                      <img
                        src={member.profilePicUrl}
                        alt={member.displayName || formatPhoneNumber(member.phoneE164)}
                        style={{
                          width: '100%',
                          height: '100%',
                          borderRadius: '50%',
                          objectFit: 'cover',
                          pointerEvents: 'none',  // üñ±Ô∏è ‰∏çÈòªÊ≠¢Áà∂ÂÖÉÁ¥†ÁöÑÁÇπÂáª‰∫ã‰ª∂
                        }}
                        onError={(e) => {
                          // Â§¥ÂÉèÂä†ËΩΩÂ§±Ë¥•ÔºåÊòæÁ§∫È¶ñÂ≠óÊØç
                          e.currentTarget.style.display = 'none';
                          e.currentTarget.parentElement!.textContent = getInitials(member.displayName || member.phoneE164);
                        }}
                      />
                    ) : (
                      getInitials(member.displayName || member.phoneE164)
                    )}
                  </div>
                  <div style={styles.infoMemberInfo}>
                    <div style={styles.infoMemberName}>
                      {member.displayName || formatPhoneNumber(member.phoneE164) || 'Êú™Áü•'}
                    </div>
                    <div style={styles.infoMemberPhone}>
                      {formatPhoneNumber(member.phoneE164)}
                    </div>
                  </div>
                  {(member.role === 'admin' || member.role === 'superadmin') && (
                    <div style={styles.infoMemberBadge}>ÁÆ°ÁêÜÂëò</div>
                  )}
                </div>
              ))
            )}
          </div>
        </div>

        {/* Â™í‰ΩìÊñá‰ª∂ÁªüËÆ° */}
        <div style={styles.infoSection}>
          <div style={styles.infoSectionTitle}>
            <span>Â™í‰Ωì„ÄÅÈìæÊé•ÂíåÊñáÊ°£</span>
            <span style={{ color: WhatsAppColors.textSecondary }}>‚ûú</span>
          </div>
        </div>
      </div>
    </div>
  );

  // ÂåÖË£ÖÂêéÁöÑ‰∏ªÂÜÖÂÆπÔºàÂåÖÂê´ËÅäÂ§©Âå∫ÂüüÂíåÁæ§ÁªÑ‰ø°ÊÅØ‰æßËæπÊ†èÔºâ
  const wrappedMainContent = (
    <div style={{ display: 'flex', height: '100%', width: '100%' }}>
      <div style={{ flex: 1, display: 'flex', flexDirection: 'column' as const }}>
        {mainContent}
      </div>
      {groupInfoSidebar}
    </div>
  );

  return (
    <>
      <WhatsAppLayout
        sidebar={<Sidebar />}
        listPanel={listPanel}
        mainContent={wrappedMainContent}
      />
      
      {/* üñºÔ∏è ÂõæÁâáÈ¢ÑËßàÊ®°ÊÄÅÊ°Ü */}
      {previewImage && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100vw',
            height: '100vh',
            backgroundColor: 'rgba(0, 0, 0, 0.9)',
            zIndex: 10000,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: 'zoom-out',
          }}
          onClick={() => setPreviewImage(null)}
        >
          <div
            style={{
              position: 'relative',
              maxWidth: '95vw',
              maxHeight: '95vh',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <img
              src={previewImage}
              alt="ÂõæÁâáÈ¢ÑËßà"
              style={{
                maxWidth: '100%',
                maxHeight: '95vh',
                objectFit: 'contain',
                borderRadius: '8px',
                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',
              }}
            />
            
            {/* ÂÖ≥Èó≠ÊåâÈíÆ */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                setPreviewImage(null);
              }}
              style={{
                position: 'absolute',
                top: '20px',
                right: '20px',
                width: '40px',
                height: '40px',
                borderRadius: '50%',
                border: 'none',
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                color: '#000',
                fontSize: '24px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.3)',
                transition: 'all 0.2s ease',
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 1)';
                e.currentTarget.style.transform = 'scale(1.1)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';
                e.currentTarget.style.transform = 'scale(1)';
              }}
              title="ÂÖ≥Èó≠È¢ÑËßà (ESC)"
            >
              √ó
            </button>
            
            {/* ‰∏ãËΩΩÊåâÈíÆ */}
            <a
              href={previewImage}
              download
              onClick={(e) => e.stopPropagation()}
              style={{
                position: 'absolute',
                bottom: '20px',
                right: '20px',
                padding: '12px 24px',
                borderRadius: '8px',
                border: 'none',
                backgroundColor: WhatsAppColors.accent,
                color: '#fff',
                fontSize: '14px',
                fontWeight: '500',
                cursor: 'pointer',
                textDecoration: 'none',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.3)',
                transition: 'all 0.2s ease',
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = WhatsAppColors.accentDark;
                e.currentTarget.style.transform = 'translateY(-2px)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = WhatsAppColors.accent;
                e.currentTarget.style.transform = 'translateY(0)';
              }}
              title="‰∏ãËΩΩÂõæÁâá"
            >
              <span style={{ fontSize: '18px' }}>‚¨áÔ∏è</span>
              <span>‰∏ãËΩΩ</span>
            </a>
          </div>
        </div>
      )}
    </>
  );
}
