'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import WhatsAppLayout, { WhatsAppColors } from '@/components/layout/WhatsAppLayout';
import Sidebar from '@/components/layout/Sidebar';
import { api } from '@/lib/api';
import { useAccountSwitchRefresh } from '@/hooks/useAccountSwitch';
import { useAccount } from '@/lib/account-context';

const styles = {
  listHeader: {
    backgroundColor: WhatsAppColors.panelBackground,
    padding: '10px 16px',
    minHeight: '60px',
    display: 'flex',
    flexDirection: 'column' as const,
    gap: '8px',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
  },
  headerTop: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  headerTitle: {
    color: WhatsAppColors.textPrimary,
    fontSize: '20px',
    fontWeight: '600' as const,
  },
  headerActions: {
    display: 'flex',
    gap: '8px',
    alignItems: 'center',
  },
  addButton: {
    padding: '6px 12px',
    backgroundColor: WhatsAppColors.accent,
    color: '#fff',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: '500' as const,
    transition: 'background-color 0.2s',
  },
  syncButton: {
    padding: '6px 12px',
    backgroundColor: '#10a37f',
    color: '#fff',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: '500' as const,
    transition: 'background-color 0.2s',
    display: 'flex',
    alignItems: 'center',
    gap: '6px',
  },
  toolbarRow: {
    display: 'flex',
    gap: '8px',
    alignItems: 'center',
  },
  select: {
    padding: '6px 10px',
    backgroundColor: WhatsAppColors.inputBackground,
    border: `1px solid ${WhatsAppColors.border}`,
    borderRadius: '6px',
    color: WhatsAppColors.textPrimary,
    fontSize: '13px',
    cursor: 'pointer',
    outline: 'none',
  },
  statsRow: {
    display: 'flex',
    gap: '12px',
    fontSize: '13px',
    color: WhatsAppColors.textSecondary,
  },
  searchBar: {
    backgroundColor: WhatsAppColors.panelBackground,
    padding: '8px 12px',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
  },
  searchInput: {
    width: '100%',
    backgroundColor: WhatsAppColors.inputBackground,
    border: 'none',
    borderRadius: '8px',
    padding: '8px 12px 8px 40px',
    color: WhatsAppColors.textPrimary,
    fontSize: '14px',
    outline: 'none',
  },
  contactList: {
    overflowY: 'auto' as const,
    flex: 1,
  },
  contactItem: {
    padding: '12px 16px',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
    cursor: 'pointer',
    display: 'flex',
    gap: '12px',
    transition: 'background-color 0.2s',
  },
  contactAvatar: {
    width: '49px',
    height: '49px',
    borderRadius: '50%',
    backgroundColor: '#6b7c85',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: '#fff',
    fontSize: '20px',
    fontWeight: '500' as const,
    flexShrink: 0,
    objectFit: 'cover' as const,
  },
  contactInfo: {
    flex: 1,
    minWidth: 0,
  },
  contactName: {
    color: WhatsAppColors.textPrimary,
    fontSize: '16px',
    fontWeight: '400' as const,
    marginBottom: '3px',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap' as const,
  },
  contactPhone: {
    color: WhatsAppColors.textSecondary,
    fontSize: '14px',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap' as const,
  },
  detailPanel: {
    display: 'flex',
    flexDirection: 'column' as const,
    height: '100%',
  },
  detailHeader: {
    backgroundColor: WhatsAppColors.panelBackground,
    padding: '20px',
    borderBottom: `1px solid ${WhatsAppColors.border}`,
  },
  detailAvatar: {
    width: '120px',
    height: '120px',
    borderRadius: '50%',
    backgroundColor: '#6b7c85',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: '#fff',
    fontSize: '48px',
    fontWeight: '500' as const,
    margin: '0 auto 20px',
    objectFit: 'cover' as const,
  },
  detailName: {
    fontSize: '28px',
    fontWeight: '600' as const,
    color: WhatsAppColors.textPrimary,
    textAlign: 'center' as const,
    marginBottom: '8px',
    cursor: 'pointer',
    padding: '4px 8px',
    borderRadius: '4px',
    transition: 'background-color 0.2s',
  },
  detailPhone: {
    fontSize: '16px',
    color: WhatsAppColors.textSecondary,
    textAlign: 'center' as const,
  },
  detailBody: {
    flex: 1,
    overflowY: 'auto' as const,
    padding: '20px',
  },
  infoSection: {
    marginBottom: '30px',
  },
  sectionTitle: {
    fontSize: '14px',
    color: WhatsAppColors.textSecondary,
    marginBottom: '12px',
    fontWeight: '600' as const,
    textTransform: 'uppercase' as const,
  },
  infoItem: {
    backgroundColor: WhatsAppColors.panelBackground,
    borderRadius: '8px',
    padding: '12px 16px',
    marginBottom: '8px',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  infoLabel: {
    fontSize: '14px',
    color: WhatsAppColors.textSecondary,
  },
  infoValue: {
    fontSize: '14px',
    color: WhatsAppColors.textPrimary,
    fontWeight: '500' as const,
  },
  actionButton: {
    width: '100%',
    padding: '12px',
    backgroundColor: WhatsAppColors.accent,
    color: '#fff',
    border: 'none',
    borderRadius: '8px',
    fontSize: '15px',
    fontWeight: '600' as const,
    cursor: 'pointer',
    transition: 'background-color 0.2s',
    marginBottom: '8px',
  },
  deleteButton: {
    backgroundColor: WhatsAppColors.error,
  },
  // ÂºπÁ™óÊ†∑Âºè
  modalOverlay: {
    position: 'fixed' as const,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 9999,
  },
  modal: {
    backgroundColor: WhatsAppColors.panelBackground,
    borderRadius: '12px',
    padding: '24px',
    width: '90%',
    maxWidth: '400px',
    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)',
  },
  modalTitle: {
    fontSize: '20px',
    fontWeight: '600' as const,
    color: WhatsAppColors.textPrimary,
    marginBottom: '20px',
  },
  formGroup: {
    marginBottom: '16px',
  },
  label: {
    display: 'block',
    fontSize: '14px',
    color: WhatsAppColors.textSecondary,
    marginBottom: '6px',
  },
  input: {
    width: '100%',
    padding: '10px 12px',
    backgroundColor: WhatsAppColors.inputBackground,
    border: `1px solid ${WhatsAppColors.border}`,
    borderRadius: '8px',
    color: WhatsAppColors.textPrimary,
    fontSize: '15px',
    outline: 'none',
    boxSizing: 'border-box' as const,
  },
  modalActions: {
    display: 'flex',
    gap: '10px',
    marginTop: '20px',
  },
  modalButton: {
    flex: 1,
    padding: '10px',
    border: 'none',
    borderRadius: '8px',
    fontSize: '15px',
    fontWeight: '600' as const,
    cursor: 'pointer',
    transition: 'background-color 0.2s',
  },
  cancelButton: {
    backgroundColor: WhatsAppColors.inputBackground,
    color: WhatsAppColors.textPrimary,
  },
  confirmButton: {
    backgroundColor: WhatsAppColors.accent,
    color: '#fff',
  },
};

export default function ContactsPage() {
  const router = useRouter();
  const { currentAccountId } = useAccount();
  const [contacts, setContacts] = useState<any[]>([]);
  const [groups, setGroups] = useState<any[]>([]);
  const [threads, setThreads] = useState<any[]>([]);
  const [selectedContact, setSelectedContact] = useState<any>(null);
  const [selectedGroup, setSelectedGroup] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [syncing, setSyncing] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState<'name' | 'time'>('name');
  const [filterBy, setFilterBy] = useState<'all' | 'withChat' | 'withoutChat'>('all');
  const [viewMode, setViewMode] = useState<'contacts' | 'groups'>('contacts');
  
  // ÂºπÁ™óÁä∂ÊÄÅ
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [formData, setFormData] = useState({ phoneE164: '', name: '' });

  const loadData = async () => {
    try {
      setLoading(true);
      if (viewMode === 'contacts') {
        // üî• ‰ΩøÁî® contacts API Ëé∑ÂèñÊâÄÊúâËÅîÁ≥ª‰∫∫ÔºàÂåÖÊã¨Ê≤°ÊúâËÅäÂ§©ËÆ∞ÂΩïÁöÑÔºâ
        const contactsResult = await api.contacts.list();
        
        // Â§ÑÁêÜ‰∏§ÁßçÂèØËÉΩÁöÑËøîÂõûÊ†ºÂºè
        let contactsList: any[] = [];
        if (Array.isArray(contactsResult)) {
          // Ê†ºÂºè1: Áõ¥Êé•ËøîÂõûÊï∞ÁªÑ
          contactsList = contactsResult;
        } else if (contactsResult?.data && Array.isArray(contactsResult.data)) {
          // Ê†ºÂºè2: {ok: true, data: [...]}
          contactsList = contactsResult.data;
        }
        
        setContacts(contactsList);
        
        // ÂêåÊó∂Ëé∑Âèñ threadsÔºåÁî®‰∫éÊòæÁ§∫ÊúÄÂêéÊ∂àÊÅØÊó∂Èó¥Á≠â‰ø°ÊÅØ
        try {
          const threadsData = await api.getThreads();
          setThreads(threadsData.threads || []);
        } catch (threadError) {
          console.warn('Ëé∑ÂèñÂØπËØùÂàóË°®Â§±Ë¥•:', threadError);
          setThreads([]);
        }
      } else {
        const groupsData = await api.groups.list({ isActive: true, limit: 1000 });
        setGroups(groupsData.groups || []);
      }
    } catch (error) {
      console.error('‚ùå Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', error);
      if (viewMode === 'contacts') {
        setContacts([]);
        setThreads([]);
      } else {
        setGroups([]);
      }
    } finally {
      setLoading(false);
    }
  };

  // ÁõëÂê¨Ë¥¶Âè∑ÂàáÊç¢‰∫ã‰ª∂
  useAccountSwitchRefresh(() => {
    loadData();
  });

  useEffect(() => {
    loadData();
  }, [viewMode]);

  const getInitials = (name: string) => {
    return name?.charAt(0)?.toUpperCase() || '?';
  };

  // ËÅîÁ≥ª‰∫∫Â¢ûÂº∫ÔºöÊ∑ªÂä†ÊòØÂê¶ÊúâÂØπËØùÁöÑÊ†áËÆ∞
  const enhancedContacts = contacts.map(contact => ({
    ...contact,
    hasThread: threads.some(t => t.contactId === contact.id),
    thread: threads.find(t => t.contactId === contact.id),
  }));

  // Á≠õÈÄâÂíåÊéíÂ∫è
  const filteredContacts = enhancedContacts
    .filter(contact => {
      // ÊêúÁ¥¢ËøáÊª§
      const name = contact.name || contact.phoneE164 || '';
      if (!name.toLowerCase().includes(searchQuery.toLowerCase())) {
        return false;
      }
      // Á±ªÂûãËøáÊª§
      if (filterBy === 'withChat') return contact.hasThread;
      if (filterBy === 'withoutChat') return !contact.hasThread;
      return true;
    })
    .sort((a, b) => {
      if (sortBy === 'name') {
        return (a.name || a.phoneE164).localeCompare(b.name || b.phoneE164);
      }
      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
    });

  // Á≠õÈÄâÁæ§ÁªÑ
  const filteredGroups = groups
    .filter(group => {
      const name = group.name || '';
      return name.toLowerCase().includes(searchQuery.toLowerCase());
    })
    .sort((a, b) => {
      if (sortBy === 'name') {
        return (a.name || '').localeCompare(b.name || '');
      }
      return new Date(b.updatedAt || 0).getTime() - new Date(a.updatedAt || 0).getTime();
    });

  // ÁªüËÆ°Êï∞ÊçÆ
  const stats = viewMode === 'contacts' ? {
    total: contacts.length,
    withChat: enhancedContacts.filter(c => c.hasThread).length,
    withoutChat: enhancedContacts.filter(c => !c.hasThread).length,
  } : {
    total: groups.length,
    monitoring: groups.filter(g => g.isMonitoring).length,
    active: groups.filter(g => g.isActive).length,
  };

  const handleChatWith = async (contact: any) => {
    try {
      if (contact.thread) {
        // Â∑≤ÊúâÂØπËØùÔºåÁõ¥Êé•Ë∑≥ËΩ¨
        router.push(`/chat/${contact.thread.id}`);
      } else {
        // Ê≤°ÊúâÂØπËØùÔºåÂÖàÂàõÂª∫Á∫øÁ®ã
        const result = await api.getOrCreateThread(contact.id);
        router.push(`/chat/${result.thread.id}`);
      }
    } catch (error) {
      console.error('Ë∑≥ËΩ¨Â§±Ë¥•:', error);
      alert('Êó†Ê≥ïÊâìÂºÄÂØπËØùÔºåËØ∑ÈáçËØï');
    }
  };

  const handleAddContact = async () => {
    if (!formData.phoneE164) {
      alert('ËØ∑ËæìÂÖ•ÊâãÊú∫Âè∑');
      return;
    }

    if (!currentAccountId) {
      alert('ËØ∑ÂÖàÈÄâÊã©Ë¥¶Âè∑');
      return;
    }

    try {
      // ‚úÖ ‰ΩøÁî®Êñ∞ÁöÑÂ§öË¥¶Âè∑contacts APIÂàõÂª∫ËÅîÁ≥ª‰∫∫
      const result = await api.contacts.create({
        phoneE164: formData.phoneE164,
        name: formData.name || undefined,
        consent: true,
      });
      
      if (result.ok) {
        alert('Ê∑ªÂä†ÊàêÂäüÔºÅ');
        await loadData(); // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
        setShowAddDialog(false);
        setFormData({ phoneE164: '', name: '' });
      } else {
        alert('Ê∑ªÂä†Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
      }
    } catch (error: any) {
      if (error.message?.includes('already exists') || error.message?.includes('CONTACT_EXISTS')) {
        alert('ËØ•ËÅîÁ≥ª‰∫∫Â∑≤Â≠òÂú®');
      } else {
        alert('Êìç‰ΩúÂ§±Ë¥•Ôºö' + (error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'));
      }
    }
  };

  const handleSyncContacts = async () => {
    if (!currentAccountId) {
      alert('ËØ∑ÂÖàÈÄâÊã©Ë¥¶Âè∑');
      return;
    }

    try {
      setSyncing(true);
      const result = await api.accounts.syncContacts(currentAccountId);
      
      // ÂêåÊ≠•ÂÆåÊàêÂêéÈáçÊñ∞Âä†ËΩΩËÅîÁ≥ª‰∫∫ÂàóË°®
      await loadData();
      
      alert(`ÂêåÊ≠•ÊàêÂäüÔºÅ\nÊñ∞Â¢û: ${result.added} ‰∏™\nÊõ¥Êñ∞: ${result.updated} ‰∏™\nÊÄªËÆ°: ${result.total} ‰∏™ËÅîÁ≥ª‰∫∫`);
    } catch (error) {
      console.error('ÂêåÊ≠•ËÅîÁ≥ª‰∫∫Â§±Ë¥•:', error);
      alert('ÂêåÊ≠•Â§±Ë¥•Ôºö' + (error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'));
    } finally {
      setSyncing(false);
    }
  };

  const handleEditName = async () => {
    if (!selectedContact) return;

    try {
      await api.updateContact(selectedContact.id, {
        name: formData.name,
      });
      await loadData();
      // Êõ¥Êñ∞ÈÄâ‰∏≠ÁöÑËÅîÁ≥ª‰∫∫
      setSelectedContact({ ...selectedContact, name: formData.name });
      setShowEditDialog(false);
      setFormData({ phoneE164: '', name: '' });
    } catch (error) {
      alert('Êõ¥Êñ∞Â§±Ë¥•Ôºö' + (error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'));
    }
  };

  const handleDeleteContact = async () => {
    if (!selectedContact) return;
    
    if (!confirm(`Á°ÆÂÆöË¶ÅÂà†Èô§ËÅîÁ≥ª‰∫∫ "${selectedContact.name || selectedContact.phoneE164}" ÂêóÔºü\n\nÂà†Èô§ÂêéÂ∞ÜÊó†Ê≥ïÊÅ¢Â§çÔºÅ`)) {
      return;
    }

    try {
      await api.deleteContact(selectedContact.id);
      await loadData();
      setSelectedContact(null);
      alert('Âà†Èô§ÊàêÂäü');
    } catch (error) {
      alert('Âà†Èô§Â§±Ë¥•Ôºö' + (error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'));
    }
  };

  // ÂàóË°®Èù¢Êùø
  const listPanel = (
    <>
      <div style={styles.listHeader}>
        {/* È°∂ÈÉ®Ê†èÔºöÊ†áÈ¢òÂíåÊìç‰ΩúÊåâÈíÆ */}
        <div style={styles.headerTop}>
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
            <button
              style={{
                padding: '6px 12px',
                borderRadius: '6px',
                border: 'none',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600',
                backgroundColor: viewMode === 'contacts' ? WhatsAppColors.accent : WhatsAppColors.inputBackground,
                color: viewMode === 'contacts' ? '#fff' : WhatsAppColors.textPrimary,
                transition: 'all 0.2s',
              }}
              onClick={() => {
                setViewMode('contacts');
                setSelectedContact(null);
                setSelectedGroup(null);
              }}
            >
              üë§ ËÅîÁ≥ª‰∫∫
            </button>
            <button
              style={{
                padding: '6px 12px',
                borderRadius: '6px',
                border: 'none',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600',
                backgroundColor: viewMode === 'groups' ? WhatsAppColors.accent : WhatsAppColors.inputBackground,
                color: viewMode === 'groups' ? '#fff' : WhatsAppColors.textPrimary,
                transition: 'all 0.2s',
              }}
              onClick={() => {
                setViewMode('groups');
                setSelectedContact(null);
                setSelectedGroup(null);
              }}
            >
              üë• Áæ§ÁªÑ
            </button>
          </div>
          <div style={styles.headerActions}>
            {viewMode === 'contacts' && (
              <>
                <button
                  style={{
                    ...styles.syncButton,
                    opacity: syncing ? 0.6 : 1,
                    cursor: syncing ? 'not-allowed' : 'pointer',
                  }}
                  onClick={handleSyncContacts}
                  disabled={syncing}
                  onMouseEnter={(e) => {
                    if (!syncing) {
                      e.currentTarget.style.backgroundColor = '#0d8c6b';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!syncing) {
                      e.currentTarget.style.backgroundColor = '#10a37f';
                    }
                  }}
                >
                  {syncing ? (
                    <>
                      <span style={{ animation: 'spin 1s linear infinite' }}>‚ü≥</span>
                      <span>ÂêåÊ≠•‰∏≠...</span>
                    </>
                  ) : (
                    <>
                      <span>‚Üª</span>
                      <span>ÂêåÊ≠•ËÅîÁ≥ª‰∫∫</span>
                    </>
                  )}
                </button>
                <button
                  style={styles.addButton}
                  onClick={() => setShowAddDialog(true)}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = WhatsAppColors.accentHover;
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = WhatsAppColors.accent;
                  }}
                >
                  ‚ûï Ê∑ªÂä†
                </button>
              </>
            )}
            {viewMode === 'groups' && (
              <button
                style={styles.addButton}
                onClick={async () => {
                  try {
                  setLoading(true);
                  
                  // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÈÄâÊã©Ë¥¶Âè∑
                  if (!currentAccountId) {
                    alert('‚ùå ËØ∑ÂÖàÈÄâÊã©Ë¥¶Âè∑\n\nËØ∑Âú®Â∑¶‰æßËæπÊ†èÈÄâÊã©‰∏Ä‰∏™ WhatsApp Ë¥¶Âè∑');
                    setLoading(false);
                    return;
                  }
                  
                  // ÂÖàÊ£ÄÊü• WhatsApp Ë¥¶Âè∑Áä∂ÊÄÅ
                  let whatsappStatus;
                  try {
                    whatsappStatus = await api.accounts.getStatus(currentAccountId);
                  } catch (statusError) {
                    alert('‚ùå Êó†Ê≥ïËøûÊé•Âà∞ÂêéÁ´ØÊúçÂä°\n\nËØ∑Á°Æ‰øùÂêéÁ´ØÊúçÂä°Ê≠£Â∏∏ËøêË°å');
                    setLoading(false);
                    return;
                  }
                  
                  // Ê£ÄÊü• WhatsApp ÊòØÂê¶Â∑≤ÁôªÂΩï (‰ΩøÁî® sessionReady Â≠óÊÆµ)
                  if (!whatsappStatus.sessionReady) {
                    alert('‚ö†Ô∏è WhatsApp Êú™Â∞±Áª™\n\nÂΩìÂâçÁä∂ÊÄÅ: ' + (whatsappStatus.status || 'Êú™Áü•') + '\n\nËØ∑ÂÖàÂú®‰ª™Ë°®ÁõòÈ°µÈù¢Êâ´Á†ÅÁôªÂΩï WhatsApp');
                    setLoading(false);
                    return;
                  }
                    
                    // ÊâßË°åÂêåÊ≠•
                    const result = await api.groups.sync();
                    
                    // Ê£ÄÊü•ÂêåÊ≠•ÁªìÊûú
                    if (result.syncedCount === 0) {
                      alert('‚ö†Ô∏è Êú™ÊâæÂà∞‰ªª‰ΩïÁæ§ÁªÑ\n\nÂèØËÉΩÂéüÂõ†Ôºö\n1. ÊÇ®ÁöÑ WhatsApp Ë¥¶Âè∑‰∏≠Ê≤°ÊúâÁæ§ÁªÑ\n2. Áæ§ÁªÑÊï∞ÊçÆÂ∞öÊú™Âä†ËΩΩÂÆåÊàêÔºåËØ∑Á®çÂêéÂÜçËØï');
                    } else {
                      alert(`‚úÖ ÂêåÊ≠•ÊàêÂäüÔºÅ\n\nüìä ÂêåÊ≠•ÁªüËÆ°Ôºö\n‚Ä¢ ÂêåÊ≠•ÊÄªÊï∞: ${result.syncedCount} ‰∏™Áæ§ÁªÑ\n‚Ä¢ Êñ∞Â¢û: ${result.newCount} ‰∏™\n‚Ä¢ Êõ¥Êñ∞: ${result.updatedCount} ‰∏™`);
                    }
                    
                    // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
                    await loadData();
                  } catch (error: any) {
                    console.error('ÂêåÊ≠•Â§±Ë¥•:', error);
                    alert('‚ùå ÂêåÊ≠•Â§±Ë¥•\n\nÈîôËØØ‰ø°ÊÅØÔºö' + (error.message || 'Êú™Áü•ÈîôËØØ') + '\n\nËØ∑Á°Æ‰øùÔºö\n1. WhatsApp Â∑≤ÁôªÂΩï\n2. ÂêéÁ´ØÊúçÂä°Ê≠£Â∏∏ËøêË°å\n3. ÁΩëÁªúËøûÊé•Ê≠£Â∏∏');
                  } finally {
                    setLoading(false);
                  }
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = WhatsAppColors.accentHover;
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = WhatsAppColors.accent;
                }}
              >
                üîÑ ÂêåÊ≠•Áæ§ÁªÑ
              </button>
            )}
          </div>
        </div>

        {/* Â∑•ÂÖ∑Ê†èÔºöÊéíÂ∫èÂíåÁ≠õÈÄâ */}
        <div style={styles.toolbarRow}>
          <select
            style={styles.select}
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as 'name' | 'time')}
          >
            <option value="name">ÊåâÂêçÁß∞ÊéíÂ∫è</option>
            <option value="time">ÊåâÊó∂Èó¥ÊéíÂ∫è</option>
          </select>
          
          <select
            style={styles.select}
            value={filterBy}
            onChange={(e) => setFilterBy(e.target.value as any)}
          >
            <option value="all">ÂÖ®ÈÉ®</option>
            <option value="withChat">ÊúâÂØπËØù</option>
            <option value="withoutChat">Êó†ÂØπËØù</option>
          </select>
        </div>

        {/* ÁªüËÆ°‰ø°ÊÅØ */}
        <div style={styles.statsRow}>
          {viewMode === 'contacts' ? (
            <>
              <span>ÊÄªËÆ°: {stats.total}</span>
              <span>‚Ä¢</span>
              <span>ÊúâÂØπËØù: {(stats as any).withChat}</span>
              <span>‚Ä¢</span>
              <span>Êó†ÂØπËØù: {(stats as any).withoutChat}</span>
            </>
          ) : (
            <>
              <span>ÊÄªËÆ°: {stats.total}</span>
              <span>‚Ä¢</span>
              <span>ÁõëÊéß‰∏≠: {(stats as any).monitoring}</span>
              <span>‚Ä¢</span>
              <span>Ê¥ªË∑É: {(stats as any).active}</span>
            </>
          )}
        </div>
      </div>

      <div style={styles.searchBar}>
        <div style={{ position: 'relative' }}>
          <span style={{ position: 'absolute', left: '12px', top: '50%', transform: 'translateY(-50%)', color: WhatsAppColors.textSecondary }}>üîç</span>
          <input
            type="text"
            placeholder={viewMode === 'contacts' ? 'ÊêúÁ¥¢ËÅîÁ≥ª‰∫∫' : 'ÊêúÁ¥¢Áæ§ÁªÑ'}
            style={styles.searchInput}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>

      <div style={styles.contactList}>
        {loading ? (
          <div style={{ padding: '20px', textAlign: 'center', color: WhatsAppColors.textSecondary }}>
            Âä†ËΩΩ‰∏≠...
          </div>
        ) : viewMode === 'contacts' ? (
          filteredContacts.length === 0 ? (
            <div style={{ padding: '40px 20px', textAlign: 'center', color: WhatsAppColors.textSecondary }}>
              <div style={{ fontSize: '48px', marginBottom: '16px' }}>üìá</div>
              <div style={{ fontSize: '16px', marginBottom: '8px', color: WhatsAppColors.textPrimary }}>
                {searchQuery ? 'Êú™ÊâæÂà∞ÂåπÈÖçÁöÑËÅîÁ≥ª‰∫∫' : 'ÊöÇÊó†ËÅîÁ≥ª‰∫∫'}
              </div>
              <div style={{ fontSize: '14px' }}>
                {!searchQuery && 'ÁÇπÂáªÂè≥‰∏äËßí"Ê∑ªÂä†"ÊåâÈíÆÊ∑ªÂä†Êñ∞ËÅîÁ≥ª‰∫∫'}
              </div>
            </div>
          ) : (
            filteredContacts.map((contact) => (
            <div
              key={contact.id}
              style={styles.contactItem}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = WhatsAppColors.hover;
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = 'transparent';
              }}
              onClick={() => setSelectedContact(contact)}
            >
              {/* Â§¥ÂÉè - ‰ºòÂÖàÊòæÁ§∫ÁúüÂÆûÂ§¥ÂÉè */}
              {contact.avatarUrl ? (
                <img 
                  src={contact.avatarUrl} 
                  alt={contact.name || contact.phoneE164}
                  style={styles.contactAvatar}
                  onError={(e) => {
                    e.currentTarget.style.display = 'none';
                    const nextDiv = e.currentTarget.nextElementSibling as HTMLElement;
                    if (nextDiv) nextDiv.style.display = 'flex';
                  }}
                />
              ) : null}
              <div 
                style={{
                  ...styles.contactAvatar,
                  display: contact.avatarUrl ? 'none' : 'flex'
                }}
              >
                {getInitials(contact.name || contact.phoneE164)}
              </div>
              
              <div style={styles.contactInfo}>
                <div style={styles.contactName}>
                  {contact.name || 'Êú™ÂëΩÂêç'}
                  {contact.hasThread && <span style={{ marginLeft: '6px', color: WhatsAppColors.accent }}>üí¨</span>}
                </div>
                <div style={styles.contactPhone}>
                  {contact.phoneE164}
                </div>
              </div>
            </div>
          ))
          )
        ) : (
          filteredGroups.length === 0 ? (
            <div style={{ padding: '40px 20px', textAlign: 'center', color: WhatsAppColors.textSecondary }}>
              <div style={{ fontSize: '48px', marginBottom: '16px' }}>üë•</div>
              <div style={{ fontSize: '16px', marginBottom: '8px', color: WhatsAppColors.textPrimary }}>
                {searchQuery ? 'Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÁæ§ÁªÑ' : 'ÊöÇÊó†Áæ§ÁªÑ'}
              </div>
              <div style={{ fontSize: '14px' }}>
                {!searchQuery && 'ÁÇπÂáªÂè≥‰∏äËßí"ÂêåÊ≠•Áæ§ÁªÑ"ÊåâÈíÆ‰ªéWhatsAppÂêåÊ≠•'}
              </div>
            </div>
          ) : (
            filteredGroups.map((group) => (
              <div
                key={group.id}
                style={styles.contactItem}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = WhatsAppColors.hover;
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = 'transparent';
                }}
                onClick={() => setSelectedGroup(group)}
              >
                <div style={{
                  ...styles.contactAvatar,
                  backgroundColor: WhatsAppColors.accent,
                }}>
                  {getInitials(group.name)}
                </div>
                
                <div style={styles.contactInfo}>
                  <div style={styles.contactName}>
                    {group.name}
                    {group.isMonitoring && <span style={{ marginLeft: '6px', color: WhatsAppColors.accent }}>üëÅÔ∏è</span>}
                  </div>
                  <div style={styles.contactPhone}>
                    üë• {group.memberCount} ÂêçÊàêÂëò
                  </div>
                </div>
              </div>
            ))
          )
        )}
      </div>
    </>
  );

  // Áæ§ÁªÑËØ¶ÊÉÖÈù¢Êùø
  const groupDetailPanel = selectedGroup ? (
    <div style={styles.detailPanel}>
      <div style={styles.detailHeader}>
        <div style={{
          ...styles.detailAvatar,
          backgroundColor: WhatsAppColors.accent,
        }}>
          {getInitials(selectedGroup.name)}
        </div>
        <div style={{...styles.detailName, cursor: 'default'}} onMouseEnter={() => {}} onMouseLeave={() => {}}>
          {selectedGroup.name}
        </div>
        <div style={styles.detailPhone}>
          Áæ§ÁªÑ ID: {selectedGroup.groupId}
        </div>
      </div>

      <div style={styles.detailBody}>
        {/* Êìç‰ΩúÊåâÈíÆ */}
        <div style={styles.infoSection}>
          <button
            style={styles.actionButton}
            onClick={() => router.push('/groups/monitoring')}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = WhatsAppColors.accentHover;
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = WhatsAppColors.accent;
            }}
          >
            üìä Êü•ÁúãÁæ§Ê∂àÊÅØÁõëÊéß
          </button>
          
          <button
            style={styles.actionButton}
            onClick={async () => {
              try {
                await api.groups.syncGroupMembers(selectedGroup.id);
                alert('Áæ§ÊàêÂëòÂêåÊ≠•ÊàêÂäü');
                loadData();
              } catch (error: any) {
                alert('ÂêåÊ≠•Â§±Ë¥•Ôºö' + error.message);
              }
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = WhatsAppColors.accentHover;
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = WhatsAppColors.accent;
            }}
          >
            üîÑ ÂêåÊ≠•Áæ§ÊàêÂëò
          </button>
        </div>

        {/* Áæ§ÁªÑ‰ø°ÊÅØ */}
        <div style={styles.infoSection}>
          <div style={styles.sectionTitle}>Áæ§ÁªÑ‰ø°ÊÅØ</div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>Áæ§ÁªÑÂêçÁß∞</span>
            <span style={styles.infoValue}>{selectedGroup.name}</span>
          </div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>ÊàêÂëòÊï∞Èáè</span>
            <span style={styles.infoValue}>{selectedGroup.memberCount}</span>
          </div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>ÁõëÊéßÁä∂ÊÄÅ</span>
            <span style={styles.infoValue}>
              {selectedGroup.isMonitoring ? 'üëÅÔ∏è ÁõëÊéß‰∏≠' : '‚≠ï Êú™ÁõëÊéß'}
            </span>
          </div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>Ê¥ªË∑ÉÁä∂ÊÄÅ</span>
            <span style={styles.infoValue}>
              {selectedGroup.isActive ? '‚úÖ Ê¥ªË∑É' : '‚≠ï ‰∏çÊ¥ªË∑É'}
            </span>
          </div>
          {selectedGroup.description && (
            <div style={styles.infoItem}>
              <span style={styles.infoLabel}>Áæ§ÁªÑÁÆÄ‰ªã</span>
              <span style={styles.infoValue}>{selectedGroup.description}</span>
            </div>
          )}
        </div>

        {/* Êó∂Èó¥‰ø°ÊÅØ */}
        <div style={styles.infoSection}>
          <div style={styles.sectionTitle}>Êó∂Èó¥‰ø°ÊÅØ</div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>ÂàõÂª∫Êó∂Èó¥</span>
            <span style={styles.infoValue}>
              {new Date(selectedGroup.createdAt).toLocaleString('zh-CN')}
            </span>
          </div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>Êõ¥Êñ∞Êó∂Èó¥</span>
            <span style={styles.infoValue}>
              {new Date(selectedGroup.updatedAt).toLocaleString('zh-CN')}
            </span>
          </div>
        </div>
      </div>
    </div>
  ) : null;

  // ËØ¶ÊÉÖÈù¢Êùø
  const mainContent = selectedGroup ? groupDetailPanel : selectedContact ? (
    <div style={styles.detailPanel}>
      <div style={styles.detailHeader}>
        {/* Â§ßÂ§¥ÂÉè */}
        {selectedContact.avatarUrl ? (
          <img 
            src={selectedContact.avatarUrl} 
            alt={selectedContact.name || selectedContact.phoneE164}
            style={styles.detailAvatar}
            onError={(e) => {
              e.currentTarget.style.display = 'none';
              const nextDiv = e.currentTarget.nextElementSibling as HTMLElement;
              if (nextDiv) nextDiv.style.display = 'flex';
            }}
          />
        ) : null}
        <div 
          style={{
            ...styles.detailAvatar,
            display: selectedContact.avatarUrl ? 'none' : 'flex'
          }}
        >
          {getInitials(selectedContact.name || selectedContact.phoneE164)}
        </div>

        {/* ÂêçÁß∞ÔºàÂèØÁÇπÂáªÁºñËæëÔºâ */}
        <div 
          style={styles.detailName}
          onClick={() => {
            setFormData({ phoneE164: selectedContact.phoneE164, name: selectedContact.name || '' });
            setShowEditDialog(true);
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.backgroundColor = WhatsAppColors.hover;
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.backgroundColor = 'transparent';
          }}
          title="ÁÇπÂáªÁºñËæëÂêçÁß∞"
        >
          {selectedContact.name || 'Êú™ÂëΩÂêç'} ‚úèÔ∏è
        </div>
        <div style={styles.detailPhone}>
          {selectedContact.phoneE164}
        </div>
      </div>

      <div style={styles.detailBody}>
        {/* Êìç‰ΩúÊåâÈíÆ */}
        <div style={styles.infoSection}>
          <button
            style={styles.actionButton}
            onClick={() => handleChatWith(selectedContact)}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = WhatsAppColors.accentHover;
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = WhatsAppColors.accent;
            }}
          >
            üí¨ {selectedContact.hasThread ? 'ÊâìÂºÄÂØπËØù' : 'ÂèëÈÄÅÊ∂àÊÅØ'}
          </button>
          
          <button
            style={{...styles.actionButton, ...styles.deleteButton}}
            onClick={handleDeleteContact}
            onMouseEnter={(e) => {
              e.currentTarget.style.opacity = '0.9';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.opacity = '1';
            }}
          >
            üóëÔ∏è Âà†Èô§ËÅîÁ≥ª‰∫∫
          </button>
        </div>

        {/* ËÅîÁ≥ª‰ø°ÊÅØ */}
        <div style={styles.infoSection}>
          <div style={styles.sectionTitle}>ËÅîÁ≥ª‰ø°ÊÅØ</div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>ÊâãÊú∫Âè∑</span>
            <span style={styles.infoValue}>{selectedContact.phoneE164}</span>
          </div>
          {selectedContact.name && (
            <div style={styles.infoItem}>
              <span style={styles.infoLabel}>ÂêçÁß∞</span>
              <span style={styles.infoValue}>{selectedContact.name}</span>
            </div>
          )}
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>ÂØπËØùÁä∂ÊÄÅ</span>
            <span style={styles.infoValue}>
              {selectedContact.hasThread ? '‚úÖ ÊúâÂØπËØù' : '‚≠ï Êó†ÂØπËØù'}
            </span>
          </div>
        </div>

        {/* Êó∂Èó¥‰ø°ÊÅØ */}
        <div style={styles.infoSection}>
          <div style={styles.sectionTitle}>Êó∂Èó¥‰ø°ÊÅØ</div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>Ê∑ªÂä†Êó∂Èó¥</span>
            <span style={styles.infoValue}>
              {new Date(selectedContact.createdAt).toLocaleString('zh-CN')}
            </span>
          </div>
          <div style={styles.infoItem}>
            <span style={styles.infoLabel}>Êõ¥Êñ∞Êó∂Èó¥</span>
            <span style={styles.infoValue}>
              {new Date(selectedContact.updatedAt).toLocaleString('zh-CN')}
            </span>
          </div>
        </div>
      </div>
    </div>
  ) : (
    <div style={{ 
      display: 'flex', 
      alignItems: 'center', 
      justifyContent: 'center', 
      height: '100%',
      flexDirection: 'column',
      color: WhatsAppColors.textSecondary,
      gap: '16px'
    }}>
      <div style={{ fontSize: '64px' }}>{viewMode === 'contacts' ? 'üë§' : 'üë•'}</div>
      <div style={{ fontSize: '18px' }}>
        {viewMode === 'contacts' ? 'ÈÄâÊã©‰∏Ä‰∏™ËÅîÁ≥ª‰∫∫Êü•ÁúãËØ¶ÊÉÖ' : 'ÈÄâÊã©‰∏Ä‰∏™Áæ§ÁªÑÊü•ÁúãËØ¶ÊÉÖ'}
      </div>
    </div>
  );

  return (
    <>
      <style jsx global>{`
        @keyframes spin {
          from {
            transform: rotate(0deg);
          }
          to {
            transform: rotate(360deg);
          }
        }
      `}</style>
      
      <WhatsAppLayout
        sidebar={<Sidebar />}
        listPanel={listPanel}
        mainContent={mainContent}
      />

      {/* Ê∑ªÂä†ËÅîÁ≥ª‰∫∫ÂºπÁ™ó */}
      {showAddDialog && (
        <div style={styles.modalOverlay} onClick={() => setShowAddDialog(false)}>
          <div style={styles.modal} onClick={(e) => e.stopPropagation()}>
            <div style={styles.modalTitle}>Ê∑ªÂä†ËÅîÁ≥ª‰∫∫</div>
            
            <div style={styles.formGroup}>
              <label style={styles.label}>ÊâãÊú∫Âè∑ *</label>
              <input
                type="text"
                style={styles.input}
                placeholder="+8613800138000"
                value={formData.phoneE164}
                onChange={(e) => setFormData({...formData, phoneE164: e.target.value})}
              />
            </div>

            <div style={styles.formGroup}>
              <label style={styles.label}>ÂêçÁß∞ÔºàÂèØÈÄâÔºâ</label>
              <input
                type="text"
                style={styles.input}
                placeholder="Âº†‰∏â"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
              />
            </div>

            <div style={styles.modalActions}>
              <button
                style={{...styles.modalButton, ...styles.cancelButton}}
                onClick={() => {
                  setShowAddDialog(false);
                  setFormData({ phoneE164: '', name: '' });
                }}
              >
                ÂèñÊ∂à
              </button>
              <button
                style={{...styles.modalButton, ...styles.confirmButton}}
                onClick={handleAddContact}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = WhatsAppColors.accentHover;
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = WhatsAppColors.accent;
                }}
              >
                Ê∑ªÂä†
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÁºñËæëÂêçÁß∞ÂºπÁ™ó */}
      {showEditDialog && (
        <div style={styles.modalOverlay} onClick={() => setShowEditDialog(false)}>
          <div style={styles.modal} onClick={(e) => e.stopPropagation()}>
            <div style={styles.modalTitle}>ÁºñËæëËÅîÁ≥ª‰∫∫ÂêçÁß∞</div>
            
            <div style={styles.formGroup}>
              <label style={styles.label}>ÂêçÁß∞</label>
              <input
                type="text"
                style={styles.input}
                placeholder="ËæìÂÖ•ÂêçÁß∞"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                autoFocus
              />
            </div>

            <div style={styles.modalActions}>
              <button
                style={{...styles.modalButton, ...styles.cancelButton}}
                onClick={() => {
                  setShowEditDialog(false);
                  setFormData({ phoneE164: '', name: '' });
                }}
              >
                ÂèñÊ∂à
              </button>
              <button
                style={{...styles.modalButton, ...styles.confirmButton}}
                onClick={handleEditName}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = WhatsAppColors.accentHover;
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = WhatsAppColors.accent;
                }}
              >
                ‰øùÂ≠ò
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
