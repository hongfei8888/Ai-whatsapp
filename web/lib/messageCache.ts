/**
 * Ê∂àÊÅØÁºìÂ≠òÂ∑•ÂÖ∑Á±ª
 * ‰ΩøÁî® localStorage ÁºìÂ≠òÊ∂àÊÅØÂàóË°®ÔºåÊèêÂçáÂä†ËΩΩÈÄüÂ∫¶
 */

interface CacheData {
  threadId: string;
  messages: any[];
  timestamp: number;
}

class MessageCache {
  private static CACHE_KEY = 'whatsapp_messages_cache';
  private static CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24Â∞èÊó∂
  private static MAX_CACHE_SIZE = 50; // ÊúÄÂ§öÁºìÂ≠ò50‰∏™‰ºöËØù
  
  /**
   * ‰øùÂ≠òÊ∂àÊÅØÂà∞ÁºìÂ≠ò
   */
  static save(threadId: string, messages: any[]): void {
    try {
      const cache: CacheData = {
        threadId,
        messages,
        timestamp: Date.now(),
      };
      
      const key = `${this.CACHE_KEY}_${threadId}`;
      localStorage.setItem(key, JSON.stringify(cache));
      
      // Ê∏ÖÁêÜÊóßÁºìÂ≠ò
      this.cleanupOldCaches();
      
      console.log(`üíæ [ÁºìÂ≠ò] Â∑≤‰øùÂ≠ò ${messages.length} Êù°Ê∂àÊÅØ (‰ºöËØù: ${threadId.substring(0, 8)}...)`);
    } catch (error) {
      console.error('‚ùå [ÁºìÂ≠ò] ‰øùÂ≠òÂ§±Ë¥•:', error);
      // localStorage ÂèØËÉΩÂ∑≤Êª°ÔºåÂ∞ùËØïÊ∏ÖÁêÜ
      this.clearAll();
    }
  }
  
  /**
   * ‰ªéÁºìÂ≠òÂä†ËΩΩÊ∂àÊÅØ
   */
  static load(threadId: string): any[] | null {
    try {
      const key = `${this.CACHE_KEY}_${threadId}`;
      const cached = localStorage.getItem(key);
      
      if (!cached) {
        console.log(`‚ÑπÔ∏è [ÁºìÂ≠ò] Êú™ÊâæÂà∞ÁºìÂ≠ò (‰ºöËØù: ${threadId.substring(0, 8)}...)`);
        return null;
      }
      
      const cache: CacheData = JSON.parse(cached);
      
      // Ê£ÄÊü•ÊòØÂê¶ËøáÊúü
      if (Date.now() - cache.timestamp > this.CACHE_EXPIRY) {
        console.log(`‚è∞ [ÁºìÂ≠ò] ÁºìÂ≠òÂ∑≤ËøáÊúü (‰ºöËØù: ${threadId.substring(0, 8)}...)`);
        this.clear(threadId);
        return null;
      }
      
      console.log(`‚úÖ [ÁºìÂ≠ò] Â∑≤Âä†ËΩΩ ${cache.messages.length} Êù°Ê∂àÊÅØ (‰ºöËØù: ${threadId.substring(0, 8)}...)`);
      return cache.messages;
    } catch (error) {
      console.error('‚ùå [ÁºìÂ≠ò] Âä†ËΩΩÂ§±Ë¥•:', error);
      return null;
    }
  }
  
  /**
   * Ê∏ÖÈô§ÊåáÂÆö‰ºöËØùÁöÑÁºìÂ≠ò
   */
  static clear(threadId: string): void {
    try {
      const key = `${this.CACHE_KEY}_${threadId}`;
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è [ÁºìÂ≠ò] Â∑≤Ê∏ÖÈô§ÁºìÂ≠ò (‰ºöËØù: ${threadId.substring(0, 8)}...)`);
    } catch (error) {
      console.error('‚ùå [ÁºìÂ≠ò] Ê∏ÖÈô§Â§±Ë¥•:', error);
    }
  }
  
  /**
   * Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠ò
   */
  static clearAll(): void {
    try {
      const keys = Object.keys(localStorage);
      let count = 0;
      
      keys.forEach((key) => {
        if (key.startsWith(this.CACHE_KEY)) {
          localStorage.removeItem(key);
          count++;
        }
      });
      
      console.log(`üóëÔ∏è [ÁºìÂ≠ò] Â∑≤Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠ò (${count} ‰∏™‰ºöËØù)`);
    } catch (error) {
      console.error('‚ùå [ÁºìÂ≠ò] Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠òÂ§±Ë¥•:', error);
    }
  }
  
  /**
   * Ê∏ÖÁêÜÊóßÁºìÂ≠òÔºà‰øùÁïôÊúÄÊñ∞ÁöÑN‰∏™Ôºâ
   */
  private static cleanupOldCaches(): void {
    try {
      const keys = Object.keys(localStorage);
      const cacheKeys = keys.filter(key => key.startsWith(this.CACHE_KEY));
      
      if (cacheKeys.length <= this.MAX_CACHE_SIZE) {
        return; // Êú™Ë∂ÖÂá∫ÈôêÂà∂
      }
      
      // Ëé∑ÂèñÊâÄÊúâÁºìÂ≠òÂèäÂÖ∂Êó∂Èó¥Êà≥
      const caches: Array<{ key: string; timestamp: number }> = [];
      
      cacheKeys.forEach(key => {
        try {
          const data = JSON.parse(localStorage.getItem(key) || '{}');
          caches.push({ key, timestamp: data.timestamp || 0 });
        } catch (e) {
          // Êó†ÊïàÁöÑÁºìÂ≠òÔºåÁõ¥Êé•Âà†Èô§
          localStorage.removeItem(key);
        }
      });
      
      // ÊåâÊó∂Èó¥Êà≥ÊéíÂ∫è
      caches.sort((a, b) => b.timestamp - a.timestamp);
      
      // Âà†Èô§ÊúÄÊóßÁöÑÁºìÂ≠ò
      const toDelete = caches.slice(this.MAX_CACHE_SIZE);
      toDelete.forEach(cache => {
        localStorage.removeItem(cache.key);
      });
      
      if (toDelete.length > 0) {
        console.log(`üßπ [ÁºìÂ≠ò] Â∑≤Ê∏ÖÁêÜ ${toDelete.length} ‰∏™ÊóßÁºìÂ≠ò`);
      }
    } catch (error) {
      console.error('‚ùå [ÁºìÂ≠ò] Ê∏ÖÁêÜÂ§±Ë¥•:', error);
    }
  }
  
  /**
   * Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°‰ø°ÊÅØ
   */
  static getStats(): { count: number; totalSize: string } {
    try {
      const keys = Object.keys(localStorage);
      const cacheKeys = keys.filter(key => key.startsWith(this.CACHE_KEY));
      
      let totalSize = 0;
      cacheKeys.forEach(key => {
        const value = localStorage.getItem(key);
        if (value) {
          totalSize += new Blob([value]).size;
        }
      });
      
      return {
        count: cacheKeys.length,
        totalSize: `${(totalSize / 1024).toFixed(2)} KB`,
      };
    } catch (error) {
      console.error('‚ùå [ÁºìÂ≠ò] Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØÂ§±Ë¥•:', error);
      return { count: 0, totalSize: '0 KB' };
    }
  }
}

export default MessageCache;

