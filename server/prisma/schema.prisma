generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== 多账号支持 ====================

model Account {
  id          String    @id @default(cuid())
  name        String                          // 账号名称，如"客服账号"
  phoneNumber String?                         // WhatsApp号码
  status      String    @default("offline")   // online, offline, connecting
  sessionPath String    @unique               // 会话数据存储路径
  isActive    Boolean   @default(true)        // 是否启用
  lastOnline  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联数据
  contacts          Contact[]
  threads           Thread[]
  messages          Message[]
  templates         MessageTemplate[]
  knowledgeBases    KnowledgeBase[]
  campaigns         Campaign[]
  groups            WhatsAppGroup[]
  batchOperations   BatchOperation[]
  translations      Translation[]
  joinGroupTasks    JoinGroupTask[]
  groupBroadcasts   GroupBroadcast[]
  
  @@index([status, isActive])
}

enum MessageDirection {
  IN
  OUT
}

enum MessageStatus {
  SENT
  FAILED
  QUEUED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  PAUSED
  DONE
  CANCELLED
}

enum CampaignRecipientStatus {
  PENDING
  PROCESSING
  SENT
  FAILED
  SKIPPED
}

model Contact {
  consent        Boolean   @default(true)
  optedOutAt     DateTime?
  tags           Json?     // 联系人标签
  source         String?   // 导入来源
  importBatchId  String?   // 批量导入批次ID
  notes          String?   // 备注信息
  avatarUrl      String?   // 头像URL

  id             String    @id @default(cuid())
  phoneE164      String
  name           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  accountId      String
  account        Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  threads        Thread[]
  campaignRecipients CampaignRecipient[]
  
  @@unique([accountId, phoneE164])
  @@index([accountId])
}

model Thread {
  id           String    @id @default(cuid())
  contactId    String    @unique
  aiEnabled    Boolean   @default(false)
  autoTranslate Boolean  @default(false) // 是否启用自动翻译
  takenOver    Boolean   @default(false)
  takenOverAt  DateTime?
  lastHumanAt  DateTime?
  lastBotAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  accountId    String
  account      Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  contact      Contact   @relation(fields: [contactId], references: [id])
  messages     Message[]

  // 会话置顶
  isPinned     Boolean   @default(false)
  pinnedAt     DateTime?

  // 会话归档
  isArchived   Boolean   @default(false)
  archivedAt   DateTime?

  // 会话标签
  labels       Json?     // ["销售", "客服", "VIP"]

  // 未读消息
  unreadCount  Int       @default(0)
  lastReadAt   DateTime?

  // 草稿
  draft        String?   // 未发送的草稿内容
  draftUpdatedAt DateTime?

  // 会话备注
  notes        String?

  @@index([accountId])
  @@index([isPinned, updatedAt])
  @@index([isArchived])
}

model Message {
  id          String           @id @default(cuid())
  threadId    String
  externalId  String?
  direction   MessageDirection
  text        String?
  translatedText String?       // 翻译后的文本
  status      MessageStatus    @default(SENT)
  createdAt   DateTime         @default(now())
  
  accountId   String
  account     Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  thread      Thread           @relation(fields: [threadId], references: [id])

  // 媒体文件支持
  mediaUrl         String?        // 媒体文件URL
  mediaType        String?        // 类型: image, document, audio, video
  mediaMimeType    String?        // MIME类型
  mediaSize        Int?           // 文件大小(字节)
  mediaFileName    String?        // 服务器上的文件名(唯一)
  originalFileName String?        // 客户端原始文件名(用于显示)
  thumbnailUrl     String?        // 缩略图URL(用于图片/视频)
  duration         Int?           // 音视频时长(秒)

  // 消息引用
  replyToId     String?        // 引用的消息ID
  replyTo       Message?       @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies       Message[]      @relation("MessageReplies")

  // 消息编辑
  isEdited      Boolean        @default(false)
  editedAt      DateTime?
  originalText  String?        // 编辑前的原文

  // 消息删除
  isDeleted     Boolean        @default(false)
  deletedAt     DateTime?
  deletedBy     String?        // 删除者(对方/自己)

  // 消息转发
  isForwarded   Boolean        @default(false)
  forwardedFrom String?        // 原始发送者信息

  // 消息标记
  isStarred     Boolean        @default(false)
  starredAt     DateTime?

  // 消息状态扩展
  deliveredAt   DateTime?      // 送达时间
  readAt        DateTime?      // 已读时间

  @@unique([accountId, externalId])
  @@index([accountId])
  @@index([threadId, createdAt])
  @@index([replyToId])
}

model AiConfig {
  id           String   @id @default("global")
  systemPrompt String
  maxTokens    Int      @default(384)
  temperature  Float    @default(0.4)
  minChars     Int      @default(80)
  stylePreset  String   @default("concise-cn")
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

// 扩展的MessageTemplate模型
model MessageTemplate {
  id          String   @id @default(cuid())
  name        String
  content     String
  description String?  // 模板描述
  category    String   @default("general") // 模板分类
  tags        Json?    // 标签数组
  variables   Json?    // 变量数组
  isActive    Boolean  @default(true) // 是否激活
  usageCount  Int      @default(0) // 使用次数
  lastUsedAt  DateTime? // 最后使用时间
  sortOrder   Int      @default(0) // 排序顺序
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  campaigns   Campaign[]

  @@index([accountId])
  @@index([category, isActive])
  @@index([usageCount, lastUsedAt])
}

// 模板分类模型
model TemplateCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?  // 图标
  color       String?  // 颜色
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Campaign {
  id             String          @id @default(cuid())
  name           String
  templateId     String?
  content        String?
  scheduleAt     DateTime?
  ratePerMinute  Int             @default(8)
  jitterMs       Int             @default(300)
  status         CampaignStatus  @default(DRAFT)
  total          Int             @default(0)
  sent           Int             @default(0)
  failed         Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  accountId      String
  account        Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  template       MessageTemplate? @relation(fields: [templateId], references: [id])
  recipients     CampaignRecipient[]
  
  @@index([accountId])
}

model CampaignRecipient {
  id         String                    @id @default(cuid())
  campaignId String
  contactId  String?
  phoneE164  String
  status     CampaignRecipientStatus   @default(PENDING)
  lastError  String?
  sentAt     DateTime?
  tries      Int                       @default(0)
  maxTries   Int                       @default(3)
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
  campaign   Campaign                  @relation(fields: [campaignId], references: [id])
  contact    Contact?                  @relation(fields: [contactId], references: [id])

  @@index([campaignId, status])
}

// 批量操作记录表
model BatchOperation {
  id            String    @id @default(cuid())
  type          String    // 'import', 'send', 'tag', 'delete', 'archive'
  status        String    @default("pending") // 'pending', 'processing', 'completed', 'failed', 'cancelled'
  title         String
  description   String?
  totalCount    Int       @default(0)
  processedCount Int      @default(0)
  successCount  Int       @default(0)
  failedCount   Int       @default(0)
  config        Json?     // 配置信息
  result        Json?     // 结果信息
  errorMessage  String?
  progress      Int       @default(0) // 0-100
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?
  createdBy     String    @default("system")
  
  accountId     String
  account       Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  items         BatchOperationItem[]

  @@index([accountId])
  @@index([type, status])
}

// 批量操作明细表
model BatchOperationItem {
  id           String    @id @default(cuid())
  batchId      String
  itemIndex    Int
  itemData     Json?     // 项目数据
  status       String    @default("pending") // 'pending', 'processing', 'completed', 'failed', 'skipped'
  errorMessage String?
  result       Json?     // 处理结果
  processedAt  DateTime?
  createdAt    DateTime  @default(now())
  batch        BatchOperation @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId, status])
}

// 知识库表
model KnowledgeBase {
  id          String    @id @default(cuid())
  title       String
  content     String
  category    String    @default("general")
  tags        Json?     // 标签数组
  keywords    Json?     // 关键词数组
  priority    Int       @default(0) // 优先级
  usageCount  Int       @default(0) // 使用次数
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    @default("system")
  
  accountId   String
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([category, isActive])
  @@index([priority, usageCount])
}

// FAQ分类表
model FAQCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?
  color       String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

// 翻译缓存表
model Translation {
  id             String   @id @default(cuid())
  originalText   String   // 原文
  translatedText String   // 译文
  sourceLang     String   // 源语言（auto-detect）
  targetLang     String   // 目标语言（zh）
  textHash       String   // MD5 hash for caching
  provider       String   @default("baidu") // 翻译服务提供商
  usageCount     Int      @default(1) // 使用次数
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  accountId      String
  account        Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, textHash])
  @@index([accountId])
  @@index([textHash])
  @@map("translations")
}

// ==================== 社群营销系统 ====================

// 批量进群任务表
model JoinGroupTask {
  id              String    @id @default(cuid())
  title           String
  inviteLinks     Json      // 邀请链接数组
  totalLinks      Int       @default(0)
  status          String    @default("pending")  // pending, running, completed, failed, cancelled
  progress        Int       @default(0)
  joinedCount     Int       @default(0)
  failedCount     Int       @default(0)
  config          Json?     // 配置（延迟等）
  result          Json?     // 执行结果详情
  errorMessage    String?
  createdAt       DateTime  @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  
  accountId       String
  account         Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@index([accountId])
  @@index([status, createdAt])
}

// WhatsApp群组表
model WhatsAppGroup {
  id              String    @id @default(cuid())
  groupId         String              // WhatsApp群组ID
  name            String
  description     String?
  avatarUrl       String?
  memberCount     Int       @default(0)
  tags            Json?                          // 群组标签
  isActive        Boolean   @default(true)
  isMonitoring    Boolean   @default(false)      // 是否开启监控
  keywords        Json?                          // 监控关键词
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  accountId       String
  account         Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  members         GroupMember[]
  messages        GroupMessage[]
  activities      GroupActivity[]
  broadcasts      GroupBroadcast[]
  
  @@unique([accountId, groupId])
  @@index([accountId])
  @@index([groupId])
  @@index([isActive, isMonitoring])
}

// 群发记录表
model GroupBroadcast {
  id              String    @id @default(cuid())
  title           String
  message         String
  mediaUrl        String?
  targetGroupIds  Json                           // 目标群组ID数组
  totalGroups     Int       @default(0)
  status          String    @default("pending")  // pending, running, paused, completed, failed, cancelled
  progress        Int       @default(0)
  sentCount       Int       @default(0)
  failedCount     Int       @default(0)
  scheduledAt     DateTime?                      // 定时发送时间
  result          Json?                          // 发送结果详情
  errorMessage    String?
  createdAt       DateTime  @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  
  accountId       String
  account         Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  groups          WhatsAppGroup[]
  
  @@index([accountId])
  @@index([status, scheduledAt])
  @@index([createdAt])
}

// 群成员表
model GroupMember {
  id              String    @id @default(cuid())
  groupId         String
  phoneE164       String
  displayName     String?
  profilePicUrl   String?                          // 🖼️ WhatsApp 头像 URL
  role            String    @default("member")   // member, admin, superadmin
  messageCount    Int       @default(0)
  lastMessageAt   DateTime?
  joinedAt        DateTime  @default(now())
  isActive        Boolean   @default(true)
  leftAt          DateTime?
  
  group           WhatsAppGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, phoneE164])
  @@index([groupId, isActive])
  @@index([phoneE164])
}

// 群消息表
model GroupMessage {
  id              String    @id @default(cuid())
  groupId         String
  messageId       String    @unique
  fromPhone       String
  fromName        String?
  text            String?
  mediaType       String?
  mediaUrl        String?
  mediaMimeType   String?    // 🖼️ MIME 类型
  mediaFileName   String?    // 🖼️ 服务器文件名
  originalFileName String?   // 🖼️ 原始文件名
  thumbnailUrl    String?    // 🖼️ 缩略图路径
  keywords        Json?                          // 命中的关键词
  isViolation     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  group           WhatsAppGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@index([groupId, createdAt])
  @@index([fromPhone])
  @@index([isViolation])
}

// 群组活动记录表
model GroupActivity {
  id              String    @id @default(cuid())
  groupId         String
  type            String                         // join, leave, add, remove, promote, message
  actorPhone      String?
  targetPhone     String?
  data            Json?
  createdAt       DateTime  @default(now())
  
  group           WhatsAppGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@index([groupId, type, createdAt])
}